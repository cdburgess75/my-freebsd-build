################################################################################
##----------------------------------------------------------------------------##
##                   FreeBSD 9.1 Release Installation Notes                   ##
##----------------------------------------------------------------------------##
################################################################################
# This guide covers everything I did to setup my FreeBSD Server. I will cover
# the following key areas
#
# - Pkg setup and ports installation mostly with portmaster
# - Setup utilities such as OpenNTPD for time and NUT for UPS monitoring
# - OpenSMTPD for external emailing of periodic emails (including IPMI checks)
# - ZFS setup for AF 4K drives and snapshotting script
# - Mostly jail friendly NFSv4 (with v2/v3 support commented)
# - Ezjail setup split to DMZ/LAN segments with syslog to host system
# - Basic FTP/iRedMail/Serviio/Owncloud/Puppet jails
#
# This version is slightly modified to remove any passwords, IPs, or domain
# names that may be sensitive. For the most part, if you use a find/replace on
# the find and replace section and the initial configuration section you can
# probably copy and paste most of what you see here straight into a terminal. 
#
# Written in 2012-2013 by Jason Unovitch
#   jason.unovitch@gmail.com
#   https://github.com/junovitch
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with
# this software. If not, see http://creativecommons.org/publicdomain/zero/1.0/
#
################################################################################
##----------------------------------------------------------------------------##
##                       Install Notes (TRIM Support)                         ##
##----------------------------------------------------------------------------##
################################################################################
#
# If using an SSD, be sure to enable TRIM support during the install. This
# can be done during the initial partitioning if doing it manually. Otherwise
# drop to a shell post install or boot into single user mode and enter the
# below commands for the data partition.
#
# SU+J will also be disabled as the journaling may not be needed on SSDs.
#
# mount
# tunefs -t enable /dev/ada0p2
# tunefs -j disable /dev/ada0p2
# reboot
#
# Some info can be found on the forums
# http://forums.freebsd.org/showthread.php?t=28004
# And here
# http://www.wonkity.com/~wblock/docs/html/ssd.html
#
# If not using and SSD this is not needed.
#
################################################################################
##----------------------------------------------------------------------------##
##                       Initial Configuration Section                        ##
##----------------------------------------------------------------------------##
################################################################################
# We're going to erase the current rc.conf and build our own. You should review
# this listing closely and do a find and replace to change IPs prefixes and 
# the domain name now. This information will repeat several times as we go
# through the guide. Once all the addresses are valid, copy-paste up until the
# 'EOF' marker.
#
# The rc.conf contains descriptive information about the local host name,
# configuration details for any potential network interfaces and which services
# should be started up at system intial boot time. You can get a good idea what
# runs on a system by reviewing this file. If you are new to FreeBSD, you may
# want to start with `man rc.conf` and review that page. One thing to note is
# you can often do `man **.conf` on many files and learn how they should be
# configured.
################################################################################

# First enable multiple routing tables (FIBs) 
# WARNING: FIB behavior changed quite a bit in 10.1-RELEASE. The old way worked
# with 9.2 and 10.0 RELEASES while the config below was changed to work with
# 10.1. Chances are this works on the old releases as well and the way it was
# configured before was "broken" and only worked because there were issues
# underneath that were fixed in 10.1.
echo 'net.fibs=4' >> /boot/loader.conf
echo 'net.add_addr_allfibs=0' >> /boot/loader.conf

cat > /etc/rc.conf << 'EOF'
# General System Config
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
fsck_y_enable="YES"
powerd_enable="YES"
zfs_enable="YES"

# Baseline kernel modules to load after boot
kld_list="dtraceall"

# General Network Configuration
hostname="xts-bsd.pa-us.mydomain.name"
sshd_enable="YES"
defaultrouter="10.100.102.1"
static_routes="dmzfibnetwork dmzfibdefault"
ipv6_static_routes="dmzfibnetwork dmzfibdefault"

# DMZ/External Interface Configuration
ifconfig_em0="inet 192.168.102.2/24 fib 1"
ifconfig_em0_ipv6="inet6 2001:123:4567:890::2/128 fib 1"
ifconfig_em0_alias0="inet 192.168.102.11/32 fib 1"		# ms1.pa-us.mydomain.name
ifconfig_em0_alias1="inet6 2001:123:4567:890::11/128 fib 1"	# ms1.pa-us.mydomain.name
ifconfig_em0_alias2="inet 192.168.102.12/32 fib 1"		# ms2.pa-us.mydomain.name
ifconfig_em0_alias3="inet6 2001:123:4567:890::12/128 fib 1"	# ms2.pa-us.mydomain.name
ifconfig_em0_alias4="inet 192.168.102.13/32 fib 1"		# www1.pa-us.mydomain.name
ifconfig_em0_alias5="inet6 2001:123:4567:890::13/128 fib 1"	# www1.pa-us.mydomain.name
ifconfig_em0_alias6="inet 192.168.102.14/32 fib 1"		# www2.pa-us.mydomain.name
ifconfig_em0_alias7="inet6 2001:123:4567:890::14/128 fib 1"	# www2.pa-us.mydomain.name
ifconfig_em0_alias8="inet 192.168.102.15/32 fib 1"		# unused
ifconfig_em0_alias9="inet6 2001:123:4567:890::15/128 fib 1"	# unused
ifconfig_em0_alias10="inet 192.168.102.16/32 fib 1"		# unused
ifconfig_em0_alias11="inet6 2001:123:4567:890::16/128 fib 1"	# unused
ifconfig_em0_alias12="inet 192.168.102.17/32 fib 1"		# unused
ifconfig_em0_alias13="inet6 2001:123:4567:890::17/128 fib 1"	# unused
ifconfig_em0_alias14="inet 192.168.102.18/32 fib 1"		# unused
ifconfig_em0_alias15="inet6 2001:123:4567:890::18/128 fib 1"	# unused
ifconfig_em0_alias16="inet 192.168.102.19/32 fib 1"		# unused
ifconfig_em0_alias17="inet6 2001:123:4567:890::19/128 fib 1"	# unused
route_dmzfibnetwork="-net 192.168.102.0/24 -interface em0 -fib 1"
route_dmzfibdefault="default 192.168.102.1 -fib 1"
ipv6_route_dmzfibnetwork="-net 2001:123:4567:890::/64 -interface em0 -fib 1"
ipv6_route_dmzfibdefault="default 2001:123:4567:890::1 -fib 1"

# LAN/Internal Interface Configuration
ifconfig_em1="inet 10.100.102.2/24"
ifconfig_em1_ipv6="inet6 2001:123:4:5678::2/64"
ifconfig_em1_alias0="inet 10.100.102.11/32"			# apps1.pa-us.mydomain.name
ifconfig_em1_alias1="inet6 2001:123:4:5678::11/128"		# apps1.pa-us.mydomain.name
ifconfig_em1_alias2="inet 10.100.102.12/32"			# apps2.pa-us.mydomain.name
ifconfig_em1_alias3="inet6 2001:123:4:5678::12/128"		# apps2.pa-us.mydomain.name
ifconfig_em1_alias4="inet 10.100.102.13/32"			# unused
ifconfig_em1_alias5="inet6 2001:123:4:5678::13/128"		# unused
ifconfig_em1_alias6="inet 10.100.102.14/32"			# serviio.pa-us.mydomain.name
ifconfig_em1_alias7="inet6 2001:123:4:5678::14/128"		# serviio.pa-us.mydomain.name
ifconfig_em1_alias8="inet 10.100.102.15/32"			# lanser.pa-us.mydomain.name
ifconfig_em1_alias9="inet6 2001:123:4:5678::15/128"		# lanser.pa-us.mydomain.name
ifconfig_em1_alias10="inet 10.100.102.16/32"			# unused
ifconfig_em1_alias11="inet6 2001:123:4:5678::16/128"		# unused
ifconfig_em1_alias12="inet 10.100.102.17/32"			# pgsql.pa-us.mydomain.name
ifconfig_em1_alias13="inet6 2001:123:4:5678::17/128"		# pgsql.pa-us.mydomain.name
ifconfig_em1_alias14="inet 10.100.102.18/32"			# mdbi.pa-us.mydomain.name
ifconfig_em1_alias15="inet6 2001:123:4:5678::18/128"		# mdbi.pa-us.mydomain.name
ifconfig_em1_alias16="inet 10.100.102.19/32"			# carbon.pa-us.mydomain.name
ifconfig_em1_alias17="inet6 2001:123:4:5678::19/128"		# carbon.pa-us.mydomain.name

# Syslog Configuration, bind (-b) to LAN Internal address
syslogd_enable="YES"
syslogd_flags="-v -v -b 10.100.102.2:syslog"

# NTPDATE Support for initial time sync during boot
ntpdate_enable="YES"
ntpdate_hosts="192.168.102.1"
'EOF'

################################################################################
# Encrypted Swap Setup
# https://www.freebsd.org/doc/handbook/swap-encrypting.html
################################################################################

# Update /dev/ada0p3 as needed
swapoff /dev/ada0p3
dd if=/dev/random of=/dev/ada0p3 bs=1m
sed -i '' -e 's/ada0p3/ada0p3.eli/' /etc/fstab
swapon /dev/ada0p3.eli

################################################################################
#  Randomness
################################################################################

echo '' >> /etc/sysctl.conf
echo '# Randomness' >> /etc/sysctl.conf
echo 'net.inet.ip.random_id="1"' >> /etc/sysctl.conf
echo 'kern.randompid="100"' >> /etc/sysctl.conf

################################################################################
# Without the changes to using multiple routing fibs, the following would be
# enough. However, a reboot will be required at this point.
#
# hostname xts-bsd.pa-us.mydomain.name
# service powerd restart
# service netif restart
# service syslogd restart
################################################################################

shutdown -r now

################################################################################
# User Add examples
################################################################################

pw groupadd -n unovitch -g 2194
pw useradd -m -n jason -c "Jason Unovitch,,," -u 1986 -g unovitch -G wheel -s /bin/tcsh
passwd jason

################################################################################
##----------------------------------------------------------------------------##
##               Configure General Programs for Host System Use               ##
##----------------------------------------------------------------------------##
################################################################################
# Let's get an initial ports tree for any installs from source. After this point
# you only have to `portsnap fetch update` to keep everything in check.
#
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-portsnap.html
################################################################################

portsnap fetch extract

################################################################################
# Initial FreeBSD-Update for the latest security patches and to make sure
# PKG repos are enabled with PKG public key in place.
#
# http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/pkgng-intro.html
################################################################################

freebsd-update fetch
freebsd-update install

pkg

cat >> /etc/periodic.conf << 'EOF'
##### Package related checks
daily_backup_pkgdb_enable="NO"
daily_status_security_pkg_checksum_enable="YES"
'EOF'

################################################################################
# Portmaster - A powerful tool for managing installs, upgrades, and removal
# of unused ports.
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/ports-using.html
# http://www.cyberciti.biz/faq/freebsd-updating-software-ports-applications/ 
# Examples:
#    `portmaster -L` to show what can be updated
#    `portmaster port_name` to install or update one port only
#    `portmaster -a` to update all (-a) installed ports
#    `portmaster -fa` to force update of all installed ports
#    `portmaster -e port_name` to expunge (-e) a port and all dependencies
#    `portmaster -s` to remove stale (-s) ports no longer depended on
#    `portmaster` while in a /usr/ports/ directory to install that port
#    `rm /var/db/portsnap/tag && rm -rf /var/db/portsnap/files && portsnap fetch extract`
#	to completely blow away all portsnap cached files and start fresh
################################################################################

pkg install ports-mgmt/portmaster

################################################################################
# Tmux - Separates the terminal from the current login. Useful if an SSH link
# gets broken during an install or you have to leave. Whatever is running
# will keep running.
################################################################################

pkg install sysutils/tmux
rehash
tmux

################################################################################
# Bash - GNU Bourne Again Shell required for some ports and install scripts.
################################################################################

pkg install shells/bash

################################################################################
# Perl - Used for misc editing tasks and various programs.
################################################################################

pkg install lang/perl5.20

################################################################################
# Unbound - DNS for the host, each jail, and the local LAN.
# - DNS resolution should always work for host even if jailed BIND isn't ready.
# - Forward authoritative requests for LAN domain to jailed BIND.
################################################################################

pkg install dns/unbound

cat > /usr/local/etc/unbound/unbound.conf << 'EOF'
server:
	# USER AND DIRECTORIES
	username: unbound
	directory: /usr/local/etc/unbound
	chroot: /usr/local/etc/unbound
	auto-trust-anchor-file: root.key
	# QUERY OPTIONS
	rrset-roundrobin: yes
	use-caps-for-id: yes
	# LISTEN INTERFACES
	interface: 10.100.102.2
	interface: 192.168.102.2
	interface: 2001:123:4:5678::2
	# ACCESS CONTROL/SECURITY
	access-control: 10.100.0.0/16 allow
	access-control: 192.168.0.0/16 allow
	access-control: 2001:123:4567:890::/64 allow
	access-control: 2001:123:4:5678::/64 allow
	access-control: 2001:987:6:543::/64 allow
	hide-identity: yes
	hide-version: yes
	# LOGGING
	verbosity: 1
	# LOCAL DOMAINS
	private-domain: "mydomain.name"
	private-domain: "100.10.in-addr.arpa."
	private-domain: "168.192.in-addr.arpa."
	domain-insecure: "100.10.in-addr.arpa."
	domain-insecure: "168.192.in-addr.arpa."
	private-address: 10.100.0.0/16
	private-address: 192.168.0.0/16
	# ENABLE STATISTICS
	statistics-interval: 0
	extended-statistics: yes
	statistics-cumulative: no

remote-control:
	control-enable: yes

include: /usr/local/etc/unbound/forward.conf
include: /usr/local/etc/unbound/reverse.conf
'EOF'

cat > /usr/local/etc/unbound/forward.conf << 'EOF'
stub-zone:
	name: "pa-us.mydomain.name."
	stub-addr: 10.100.102.15@5353

stub-zone:
	name: "nc-us.mydomain.name."
	stub-addr: 10.100.102.15@5353

forward-zone:
	name: "."
	forward-addr: 8.8.8.8        # Google Public DNS
	forward-addr: 74.82.42.42    # Hurricane Electric
	forward-addr: 4.2.2.4        # Level3 Verizon
'EOF'

cat > /usr/local/etc/unbound/reverse.conf << 'EOF'
stub-zone:
	name: "100.10.in-addr.arpa."
	stub-addr: 10.100.102.15@5353

stub-zone:
	name: "168.192.in-addr.arpa."
	stub-addr: 10.100.102.15@5353
'EOF'

/usr/local/sbin/unbound-control-setup
/usr/local/sbin/unbound-anchor
chown unbound /usr/local/etc/unbound /usr/local/etc/unbound/root.key
chgrp unbound /usr/local/etc/unbound/*

echo '' >> /etc/rc.conf
echo '# DNS' >> /etc/rc.conf
echo 'unbound_enable="YES"' >> /etc/rc.conf
service unbound start

################################################################################
# OpenNTPD - Used for upkeep of time
#
# Perl in-place edits are used to change from the default pool.ntp.org servers
# to using the default gateway for NTP.
################################################################################

pkg install net/openntpd

cat > /usr/local/etc/ntpd.conf << 'EOF'
# Addresses to listen on (ntpd does not listen by default)
listen on 10.100.102.2
listen on 2001:123:4:5678::2

# sync to a single server
#server ntp.example.org

# use a random selection of NTP Pool Time Servers
# see http://support.ntp.org/bin/view/Servers/NTPPoolServers
servers us.pool.ntp.org
'EOF'

echo '' >> /etc/rc.conf
echo '# OpenNTPD Support for upkeep of time' >> /etc/rc.conf
echo 'openntpd_enable="YES"' >> /etc/rc.conf

service openntpd start

################################################################################
# OpenSMTPD - Simple and secure email MTA used for system notification emails.
#
# The guide link below is very helpful, but check `man smtpd.conf` for
# examples on the syntax to use as this is a bit dated. If you use an address
# other than @gmail.com checking the man page will probably be required.
#
# https://cooltrainer.org/2012/06/06/external-mailing-on-freebsd/
#
# Also see this link for notes and examples on the new syntax as of Jan 2013
# http://forums.freebsd.org/showthread.php?t=36745
################################################################################

pkg install mail/opensmtpd

cd /usr/local/etc/mail/

cat > smtpd.conf << 'EOF'
# This is the smtpd server system-wide configuration file.
# See smtpd.conf(5) for more information.

# To accept external mail, replace with: listen on all
listen on 10.100.102.2
listen on 2001:123:4:5678::2

# If you edit the file, you have to run "smtpctl update table aliases"
table aliases file:/etc/mail/aliases
table secrets db:/usr/local/etc/mail/secrets.db
table trusted_IPs { 10.0.0.0/8, 2001:987:6:543::/64, 2001:123:4:5678::/64 }

# Uncomment the following to accept external mail for domain "example.org"
#accept from any for domain "example.org" alias <aliases> deliver to mbox
accept for local alias <aliases> deliver to mbox
accept from local for domain "gmail.com" relay via tls+auth://gmail_login@smtp.gmail.com:587 auth <secrets>
accept from source <trusted_IPs> for domain "mydomain.name" alias <aliases> deliver to mbox
'EOF'

touch secrets
chmod 640 secrets
chown root:_smtpd secrets
echo 'gmail_login  jason.unovitch:CHANGETHISTOTHEPASSWORD' >> secrets
/usr/local/libexec/opensmtpd/makemap secrets

perl -pwi -e 's^# root:\tme\@my.domain^root:\tjason.unovitch\@gmail.com^' /etc/mail/aliases
smtpctl update table aliases

echo '' >> /etc/rc.conf
echo '# Disable Sendmail MTA' >> /etc/rc.conf
echo 'sendmail_enable="NO"' >> /etc/rc.conf
echo 'sendmail_submit_enable="NO"' >> /etc/rc.conf
echo 'sendmail_outbound_enable="NO"' >> /etc/rc.conf
echo 'sendmail_msp_queue_enable="NO"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# Enable OpenSMTPD MTA' >> /etc/rc.conf
echo 'smtpd_enable="YES"' >> /etc/rc.conf

service sendmail stop
service smtpd start

echo "Test message" | mail -s "Test Email" root

################################################################################
# OpenVPN Certificate Authority
################################################################################

pkg install security/openvpn

cp -Rv /usr/local/share/easy-rsa/ /usr/local/etc/openvpn-ca
cd /usr/local/etc/openvpn-ca

perl -pwi -e 's^KEY_PROVINCE=.*^KEY_PROVINCE="PA"^g' vars
perl -pwi -e 's^KEY_SIZE=.*^KEY_SIZE=2048^g' vars
perl -pwi -e 's^KEY_CITY=.*^KEY_CITY="Someplace"^g' vars
perl -pwi -e 's^KEY_ORG=.*^KEY_ORG="SomethingSomewhere"^g' vars
perl -pwi -e 's^KEY_CN=.*^KEY_CN=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_NAME=.*^KEY_NAME=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_OU=.*^KEY_OU=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_MODULE_PATH=.*^PKCS11_MODULE_PATH=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_PIN=.*^PKCS11_PIN=1234^' vars
perl -pwi.interact -e 's^ --interact^^g' build-ca build-key

bash
. ./vars
./clean-all
./build-dh
export KEY_CN=xts-bsd && export KEY_NAME=xts-bsd && ./build-ca
export KEY_CN=xts-rtr-server && export KEY_NAME=xts-rtr-server && ./build-key-server xts-rtr-server
export KEY_CN=xju-rtr-server && export KEY_NAME=xju-rtr-server && ./build-key-server xju-rtr-server
export KEY_CN=xts-rtr-client && export KEY_NAME=xts-rtr-client && ./build-key xts-rtr-client
export KEY_CN=xju-rtr-client && export KEY_NAME=xju-rtr-client && ./build-key xju-rtr-client

/usr/local/sbin/openvpn --genkey --secret keys/ta.key

scp keys/dh2048.pem root@xts-rtr:/usr/local/etc/openvpn/keys

scp keys/ca.crt root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ca.crt root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/ta.key root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ta.key root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/xts-rtr-* root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/xju-rtr-* root@xju-rtr:/usr/local/etc/openvpn/keys

################################################################################
# Pstree - Better eye on process associations.
# Use via `pstree`
################################################################################

pkg install sysutils/pstree

################################################################################
# Iftop - useful tool for network monitoring, more details than `systat -ifs`
# Use via `iftop -i em1` or `iftop -i em0`
################################################################################

pkg install net-mgmt/iftop

################################################################################
# Cmdwatch - Repeat a command every few seconds for monitoring/testing.
# Use via `cmdwatch`
################################################################################

pkg install sysutils/cmdwatch 

################################################################################
# Tree - For displaying a more graphical listing of files
# Use via `tree`
################################################################################

pkg install sysutils/tree

################################################################################
# BSDStats - Report BSD usage, hardware, and software popularity.
# Recommend agreeing to all defaults during install.
################################################################################

echo '' >> /etc/rc.conf
echo '# Enable BSDStats' >> /etc/rc.conf
echo '##### Statistics and reporting checks' >> /etc/periodic.conf
pkg install sysutils/bsdstats

################################################################################
# ClamAV - Antivirus
################################################################################

pkg install security/clamav

echo '' >> /etc/rc.conf
echo '# Enable CLAMD' >> /etc/rc.conf
echo 'clamav_freshclam_enable="YES"' >> /etc/rc.conf
echo 'clamav_clamd_enable="YES"' >> /etc/rc.conf

freshclam
service clamav-freshclam start
service clamav-clamd start

################################################################################
# Vim-lite - Handles most text editing, very useful for syntax highlighting.
################################################################################

pkg install editors/vim-lite

################################################################################
# Checkbashisms - Checks for potential Bash specific commands in scripts that
# could cause compatibility issues.
################################################################################

pkg install devel/checkbashisms

################################################################################
# Portlint and Rclint for checking ports and scripts for syntax issues 
################################################################################

pkg install ports-mgmt/portlint devel/rclint

################################################################################
# IPMItool
# Example to display sensors data: ipmitool sdr
################################################################################

# Add ipmi kernel module prerequisite to boot time kernel module load list
sysrc kld_list="`sysrc -ni kld_list` ipmi"

# Load ipmi kernel module now
kldload ipmi

# Install
pkg install sysutils/ipmitool

################################################################################
# Nut (Network UPS Tools) - Monitor UPS status and auto-shutdown if necessary
# http://people.freebsd.org/~thierry/nut_FreeBSD_HowTo.txt 
################################################################################

pkg install sysutils/nut

# Still testing as of 31 December, almost there...
# Haven't had the time to actually validate this works properly

echo '' >> /etc/rc.conf
echo '## UPS Monitoring Tools' >> /etc/rc.conf
echo 'nut_enable="YES"' >> /etc/rc.conf
echo 'nut_upslog_enable="NO" # Off - Using Collectd monitoring instead' >> /etc/rc.conf
echo 'nut_upsmon_enable="YES"' >> /etc/rc.conf

# Configure ups.conf for USB monitoring
cd /usr/local/etc/nut
cp ups.conf.sample ups.conf
printf '[UPS]\n' >> ups.conf
printf '\tdriver = usbhid-ups\n' >> ups.conf
printf '\tport = auto\n' >> ups.conf

# Configure ups.conf for SNMP for monitoring
# Unused since firmware upgrade on SNMP card bricked the card
#cd /usr/local/etc/nut
#cp ups.conf.sample ups.conf
#printf '[UPS]\n' >> ups.conf
#printf '\tdriver = usbhid-ups\n' >> ups.conf
#printf '\tport = auto\n' >> ups.conf

# Copy default upsd.conf
cp upsd.conf.sample upsd.conf

# Generate random passwords for each user
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Configure upsd.users
cp upsd.users.sample upsd.users
printf '# Supervision user\n' >> upsd.users
printf '[admin]\n' >> upsd.users
printf '\tpassword = adminpassword\n' >> upsd.users
printf '\tactions = SET\n' >> upsd.users
printf '\tactions = FSD\n' >> upsd.users
printf '\tinstcmds = ALL\n\n' >> upsd.users
printf '# Protection user\n' >> upsd.users
printf '[monuser]\n' >> upsd.users
printf '\tpassword  = userpassword\n' >> upsd.users
printf '\tupsmon master\n' >> upsd.users

# Configure upsmon.conf
cp upsmon.conf.sample upsmon.conf
echo 'MONITOR UPS@localhost 1 monuser userpassword master' >> upsmon.conf
echo 'SHUTDOWNCMD "/sbin/shutdown -p now"' >> upsmon.conf

# Fix perms/ownership
chown uucp /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users
chmod 440 /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users

# Start NUT
service nut start
service nut_upslog start
service nut_upsmon start

################################################################################
# Logcheck - Reviews log files.
################################################################################

# Setup
pkg install security/logcheck

cat > /usr/local/etc/logcheck/logcheck.logfiles << 'EOF'
/var/log/all.log
/var/log/auth.log
'EOF'

# Allow /var/log/all.log to be used
perl -pwi -e 'if (/all\.log/)  {s/#\*\.\*/\*\.\*/;}' /etc/syslog.conf

# Create /var/log/all.log and restart syslogd
touch /var/log/all.log
service syslogd restart

# Add root:logcheck after all.log and change perms on that line from 600 to 640
perl -pwi -e 'if (/all\.log/)  {s/all\.log\t\t/all.log\troot:logcheck/;   s/600/640/; }' /etc/newsyslog.conf
perl -pwi -e 'if (/auth\.log/) {s/auth\.log\t\t/auth.log\troot:logcheck/; s/600/640/; }' /etc/newsyslog.conf

# Fix permissions
chown root:logcheck /var/log/all.log /var/log/auth.log
chmod 640 /var/log/all.log /var/log/auth.log

# Change alias for mailing
perl -pwi -e 's^# General redirections for pseudo accounts^# General redirections for pseudo accounts\nlogcheck:\tjason^' /etc/mail/aliases
smtpctl update table aliases

# Copy logcheck crontab into place and fix permissions
cp /usr/local/share/examples/logcheck/crontab.in /var/cron/tabs/logcheck
chmod 600 /var/cron/tabs/logcheck

################################################################################
# Iperf
################################################################################

pkg install benchmarks/iperf

################################################################################
# Sudo
################################################################################

pkg install security/sudo

################################################################################
# Collectd
################################################################################

pkg install net-mgmt/collectd5

cat > /usr/local/etc/collectd.conf << 'EOF'
Hostname    "xts-bsd"
FQDNLookup  false
BaseDir     "/var/db/collectd"
PIDFile     "/var/run/collectd.pid"
PluginDir   "/usr/local/lib/collectd"
TypesDB     "/usr/local/share/collectd/types.db"

Interval    120

LoadPlugin cpu
LoadPlugin df
LoadPlugin disk
LoadPlugin exec
LoadPlugin interface
LoadPlugin load
LoadPlugin memory
LoadPlugin network
LoadPlugin nut
LoadPlugin postgresql
LoadPlugin processes
LoadPlugin uptime
LoadPlugin write_graphite
LoadPlugin zfs_arc

<Plugin disk>
    Disk "/^gptid/"
    Disk "/^md/"
    Disk "/^pass/"
    Disk "/^cd/"
    IgnoreSelected true
</Plugin>

<Plugin df>
    MountPoint "/^/$/"
    MountPoint "/^/zfs$/"
    IgnoreSelected false
</Plugin>

<Plugin exec>
    Exec "_collectd:_collectd" "/usr/local/sbin/exec-hwsensors.sh"
    Exec "_collectd:_collectd" "/usr/local/sbin/exec-unbound.sh"
</Plugin>

<Plugin interface>
    Interface "lo0"
    Interface "pflog0"
    Interface "plip0"
    Interface "/^usbus/"
    IgnoreSelected true
</Plugin>

<Plugin nut>
  UPS "UPS@localhost:3493"
</Plugin>

<Plugin postgresql>
  <Database foreman>
    Host "pgsql.pa-us.mydomain.name"
    Port "5432"
    User "collectd"
    Password "collectd_password"
    Query transactions
    Query queries
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>
  <Database graphite>
    Host "pgsql.pa-us.mydomain.name"
    Port "5432"
    User "collectd"
    Password "collectd_password"
    Query transactions
    Query queries
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>
</Plugin>

<Plugin write_graphite>
  <Node "xts-bsd">
    Host "graphite.pa-us.mydomain.name"
    Port "2013"
    Prefix "collectd."
    EscapeCharacter "_"
    StoreRates true
    AlwaysAppendDS false
    Protocol "tcp"
    LogSendErrors true
  </Node>
</Plugin>
'EOF'

cat > /usr/local/sbin/exec-unbound.sh << 'EOF'
#!/bin/sh
# Exec script for collectd to read Unbound stats
# Requires that user running the script has permissions to the Unbound key

HOSTNAME="${COLLECTD_HOSTNAME:-`hostname -s`}"
INTERVAL="${COLLECTD_INTERVAL:-60}"

while sleep "$INTERVAL"
do
	/usr/local/sbin/unbound-control stats \
	    | awk -v HOSTNAME=$HOSTNAME -v INTERVAL=$INTERVAL \
	    '/^(total|num|mem)\./ \
	    { gsub(/\./, "_"); gsub(/=/, " "); \
	      print "PUTVAL", HOSTNAME"/exec-unbound/gauge-unbound/"$1, "interval="INTERVAL, "N:"$2 }'
done
'EOF'

cat > /usr/local/sbin/exec-hwsensors.sh << 'EOF'
#!/bin/sh
# Exec script for collectd to read IPMI and SMART stats
# Keep an eye on the top 5 per https://www.backblaze.com/blog/hard-drive-smart-stats/
# Requires sudo configuration to gather hardware statistics

HOSTNAME="${COLLECTD_HOSTNAME:-`hostname -s`}"
INTERVAL="${COLLECTD_INTERVAL:-60}"

while sleep "$INTERVAL"
do
	for disk in ada0 ada1 ada2 ada3; do
	  /usr/local/bin/sudo /usr/local/sbin/smartctl -A /dev/$disk \
	    | awk -v HOSTNAME=$HOSTNAME -v INTERVAL=$INTERVAL -v DISK=$disk \
	    '/Reallocated_Sector_Ct|Reported_Uncorrect|Command_Timeout|Temperature_Celsius|Current_Pending_Sector/ \
	    { print "PUTVAL", HOSTNAME"/exec-hwsensors/gauge-smart/"$2"-"DISK, "interval="INTERVAL, "N:"$10 }'
	done

	/usr/local/bin/ipmitool -c sdr \
	    | awk -F',' -v HOSTNAME=$HOSTNAME -v INTERVAL=$INTERVAL \
	    '/(degrees|Volts|RPM)/ \
	    { gsub (/ /, "");
	      print "PUTVAL", HOSTNAME"/exec-hwsensors/gauge-ipmi/"$1, "interval="INTERVAL, "N:"$2 }'
done
'EOF'

# Turn off syslog for _collectd user sudo commands
echo 'Defaults:_collectd \!syslog' >> /usr/local/etc/sudoers.d/_collectd
echo '_collectd ALL=(ALL) NOPASSWD: /usr/local/sbin/smartctl' >> /usr/local/etc/sudoers.d/_collectd

# Enable Collectdmon
echo '' >> /etc/rc.conf
echo '# Enable Collectd via collectdmon' >> /etc/rc.conf
echo 'collectdmon_enable="YES"' >> /etc/rc.conf
echo 'collectdmon_user="_collectd"' >> /etc/rc.conf

# patch both rc scripts to allow precmd routines to make PID files
patch /usr/local/etc/rc.d/collectd << 'EOF'
25a26,34
> pidfile=/var/run/collectd.pid
> start_precmd=collectd_precmd
> collectd_precmd() {
>     # If collectd_user is not blank, make pidfile and chown to collectd_user
>     if [ ! -z ${collectd_user} ]; then
>         touch ${pidfile}; chown ${collectd_user} ${pidfile}
>     fi
> }
>
'EOF'
patch /usr/local/etc/rc.d/collectdmon << 'EOF'
26a27,35
> pidfile=/var/run/collectdmon.pid
> start_precmd=collectdmon_precmd
> collectdmon_precmd() {
>     # If collectdmon_user is not blank, make pidfile and chown to collectdmon_user
>     if [ ! -z ${collectdmon_user} ]; then
>        touch ${pidfile}; chown ${collectdmon_user} ${pidfile}
>     fi
> }
>
'EOF'

# Create _collectd user, assign to extra unbound group to run unbound stats,
# assign to operator group to read /dev/ipmi0, and fix permissions
pw useradd _collectd -c "Collectd daemon,,," -d "/var/db/collectd" -G unbound,operator -s /usr/sbin/nologin
chgrp _collectd /usr/local/etc/collectd.conf
chown -R _collectd /var/db/collectd

service collectdmon start

################################################################################
# Panicmail - Report kernel panics.
################################################################################

pkg install sysutils/panicmail
echo 'panicmail_enable="YES"' >> /etc/rc.conf

################################################################################
# DTraceToolkit - Experimental scripts for investigating issues
# /usr/share/dtrace already has scripts that are FreeBSD tested
################################################################################

pkg install shells/mksh sysutils/DTraceToolkit

################################################################################
# FTPD
################################################################################

echo '' >> /etc/rc.conf
echo '# Enable FTPD' >> /etc/rc.conf
echo 'ftpd_enable="YES"' >> /etc/rc.conf
echo 'ftpd_flags="-h -ll -a 10.100.102.2"' >> /etc/rc.conf
service ftpd start

################################################################################
# Cleanup periodic messages for readability on a phone.
################################################################################

cat >> /etc/periodic.conf << 'EOF'
##### General formatting
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks
daily_status_rwho_enable="NO"
daily_clean_hoststat_enable="NO"
daily_status_network_enable="NO"
##### Disk/filesystem status and maintenance checks
daily_status_disks_enable="NO"
daily_clean_tmps_enable="YES"
'EOF'

################################################################################
# Make all periodic jobs run one hour later. Also add a bi-weekly 
# `freebsd-update` check as well as a `portsnap cron` to keep have a current
# ports files ready to go.
#
# The new /etc/crontab will look like this:
#
# 1	4	*	*	*	root	periodic daily
# 15	5	*	*	6	root	periodic weekly
# 30	6	1	*	*	root	periodic monthly
################################################################################

perl -pwi -e 's/^1\t3/1\t4/' /etc/crontab
perl -pwi -e 's/^15\t4/15\t5/' /etc/crontab
perl -pwi -e 's/^30\t5/30\t6/' /etc/crontab

printf "5\t4\t*\t*\t*\t/usr/sbin/portsnap cron\n" >> /var/cron/tabs/root
printf "30\t5\t*\t*\ttue,sat\t/usr/sbin/freebsd-update cron\n" >> /var/cron/tabs/root

# Also, remove 'src' line from Components to prevent freebsd-update from trying
# to update /usr/src
sed -i '' -e '/^Components/ s/ src//' /etc/freebsd-update.conf

################################################################################
# Make default syslog sizes a bit bigger and keep more of them
################################################################################

perl -pwi -e 's^100\t^2000\t^' /etc/newsyslog.conf
perl -pwi -e 's^3|5|7\t^9\t^' /etc/newsyslog.conf

################################################################################
##----------------------------------------------------------------------------##
##                  Programs Related to Host System Storage                   ##
##----------------------------------------------------------------------------##
################################################################################
# Smartd package for basic disk management and status checking.  We'll set up
# the smartd.conf for more detailed checks along with sending a notification
# email to root if issues get detected.
# 
# Basic explanation (enter `man smartd.conf` to get more detailed info)
# DEVICESCAN infers checking all drives
# "-I 194 -W 4,35,45" sends emails for changes of 4 degrees, info notices at 
#	35 degrees, and critical message above 45 degrees
# "-s (S/../.././05|L/../../5/06)" runs short check daily at 5AM, long check
#	weekly at 6 am on Friday.
################################################################################

pkg install sysutils/smartmontools

cp /usr/local/etc/smartd.conf.sample /usr/local/etc/smartd.conf
perl -pwi -e 's^\ADEVICESCAN\n^DEVICESCAN -a -o on -S on -I 194 -W 4,35,45 -R 5 -m root -s (S/../.././05|L/../../5/06)\n^' /usr/local/etc/smartd.conf

echo 'daily_status_smart_devices="/dev/ada0 /dev/ada1 /dev/ada2 /dev/ada3"' >> /etc/periodic.conf

echo '' >> /etc/rc.conf
echo '# Smartd disk monitoring' >> /etc/rc.conf
echo 'smartd_enable="YES"' >> /etc/rc.conf

service smartd start

################################################################################
# NCDU - Useful tool for determining disk usage
################################################################################

pkg install sysutils/ncdu

################################################################################
# DUFF - Find duplicates
################################################################################

pkg install sysutils/duff

################################################################################
# Rsync
################################################################################

pkg install net/rsync

################################################################################
# Unison 2.40 (compiled without X11 support)
################################################################################

pkg install net/unison240

################################################################################
# Setup of Unison for use
# Prerequisites:
# 1. Generate an SSH key for root.
#    ssh-keygen -t ecdsa -b 521 -C "`whoami`@`hostname`-`date +%Y%m%d`"
# 2. Distribute this out to each host to be synced. In my case, I will put this
#    in my Puppet directory to be automatically distributed.
#    cp /root/.ssh/id_ecdsa.pub /zfs/jails/puppet.pa-us.mydomain.name/usr/local/etc/puppet/mint13lts/common/root/.ssh/authorized_keys
# 3. Ensure root login enable on all clients. Update sshd_config to show:
#    PermitRootLogin without-password
#
# Warning:
# This does give root on the FreeBSD host the ability to SSH into each box.
# Protect this accordingly.
################################################################################
# First step is to generate a Unison preference file, this first one will sync
# the /zfs/homedirs across the server and a computer named silverstone.
################################################################################

cat > /root/.unison/syncWAN.prf << 'EOF'
# Unison preferences file for full sync of /zfs/homedirs
root = /zfs/homedirs
root = ssh://silverstone//zfs/homedirs

ignore = Path common_media
prefer=newer
owner=true
group=true
fastcheck=true
confirmbigdel=true
auto=true
batch=true
logfile=/var/log/unison-syncWAN.log
'EOF'
cat > /root/.unison/syncWAN-media.prf << 'EOF'
# Unison preferences file for full sync of /zfs/homedirs
root = /zfs/homedirs/common_media
root = ssh://silverstone//zfs/homedirs/common_media

prefer=newer
owner=true
group=true
fastcheck=true
confirmbigdel=true
auto=true
batch=true
logfile=/var/log/unison-syncWAN.log
'EOF'

################################################################################
# Since a logfile will be created, drop a properly formatted entry into
# /etc/newsyslog.conf to rotate them every day by newsyslog.
################################################################################

printf "/var/log/unison-syncWAN.log\t\t640  9\t   *\t@T00  J\n" >> /etc/newsyslog.conf
printf "/var/log/unison-syncLAN.log\t\t640  9\t   *\t@T00  J\n" >> /etc/newsyslog.conf

################################################################################
# Now echo some jobs into cron for this. The full WAN sync will be daily at 0415
# while the local LAN sync will run every 10 minutes. Crontab entry will first
# grep the process table for an active run and if that fails it will start out
# Unison. All results will be sent to /dev/null.
################################################################################

printf "15\t4\t*\t*\t*\t/bin/pgrep -f 'unison240 syncWAN.prf' || /usr/local/bin/unison240 syncWAN.prf > /dev/null 2>&1; /bin/pgrep -f 'unison240 syncWAN-media.prf' || /usr/local/bin/unison240 syncWAN-media.prf > /dev/null 2>&1\n" >> /var/cron/tabs/root
printf "*/10\t*\t*\t*\t*\t/bin/pgrep -f 'unison240 syncLAN.prf' || /usr/local/bin/unison240 syncLAN.prf > /dev/null 2>&1\n" >> /var/cron/tabs/root
printf "15\t12\t*\t*\t*\t/bin/pkill -f 'unison240 syncWAN.prf'; sleep 60; /bin/pkill -f 'unison240 syncWAN-media.prf'\n" >> /var/cron/tabs/root

################################################################################
# Finally, put a quick script into periodic that will grep for "Synchronization"
# in the prior day's logs and for review during the daily periodic email.
################################################################################

cat > /usr/local/etc/periodic/daily/800.unison << 'EOF'
#!/bin/sh
#
# /usr/local/etc/periodic/daily/800.unison 2014-01-15
#
# Check logs for yesterday's Unison runs
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

case "$daily_unison_checkup" in
    [Yy][Ee][Ss])
        # Run twice to show all then again to get exit statuses
        echo ""
        echo "Checking yesterday's Unison LAN syncs"
        bzgrep "Synchronization" /var/log/unison-syncLAN.log.0.bz2
        bzgrep "Synchronization" /var/log/unison-syncLAN.log.0.bz2 | \
                tail -2 | grep incomplete > /dev/null && lan=1 || lan=0
        echo ""
        echo "Checking yesterday's Unison WAN sync"
        bzgrep "Synchronization" /var/log/unison-syncWAN.log.0.bz2
        bzgrep "Synchronization" /var/log/unison-syncWAN.log.0.bz2 | \
                tail -2 | grep incomplete > /dev/null && wan=1 || wan=0

        # With an incomplete in either of the last 2 log entries, do 
        # bitwise OR to set rc to 1 
        rc=$(( $lan | $wan ))
        ;;
    *)
        rc=0
        ;;
esac

exit $rc
'EOF'
chmod 555 /usr/local/etc/periodic/daily/800.unison

echo 'daily_unison_checkup="YES"' >> /etc/periodic.conf

################################################################################
# ZFS-Stats
################################################################################

pkg install sysutils/zfs-stats

################################################################################
# Beadm
################################################################################

pkg install sysutils/beadm

################################################################################
##----------------------------------------------------------------------------##
##                   Configure Host System ZFS and RAIDZ pool                 ##
##----------------------------------------------------------------------------##
################################################################################
# Setup RAIDZ pool
# http://zfsguru.com/doc/bsd/zfs
# http://savagedlight.me/2012/07/15/freebsd-zfs-advanced-format/
################################################################################
# Search for all hard drives in the `dmesg`, confirm with `smartctl`
# Note the devices shown for later (i.e. /dev/ada0 and so on)
#
# If physical sector size matches the logical size below then you can likely
# skip to the `zpool create zfs` step.
#
# Performance using native 4K sectors should be faster in Advanced Format
# drives that use physical 4096K sector and fake a 512K sector to the OS. I
# tested repeated transfers of 13.5 gb of files from the main SSD onto a raid-z
# pool using each sector size.
#
# Mean write speed on a 512 byte pool  - 123.5 mb/sec
# Mean write speed on a 4096 byte pool - 134.5 mb/sec (9% faster)
################################################################################

dmesg | grep "sectors"
smartctl -a /dev/ada1 | grep "Sector Sizes"
smartctl -a /dev/ada2 | grep "Sector Sizes"
smartctl -a /dev/ada3 | grep "Sector Sizes"

################################################################################
# Erase any partition table on the planned pool drives by doing this.
#
# BE CAREFUL! Use the wrong output file (of=) and you may not be able boot. 
# In this case, the main OS was on the first drive (/dev/ada0) so this will
# clear the partition table of the remaining 3 drives.
################################################################################

dd if=/dev/zero of=/dev/ada1 bs=1m count=1
dd if=/dev/zero of=/dev/ada2 bs=1m count=1
dd if=/dev/zero of=/dev/ada3 bs=1m count=1

################################################################################
# Manually create the partition tables followed by a ZFS type (-t) partition
# beginning (-b) at the 1 mb mark and aligned (-a) to 4096 sized sectors. The
# label (-l) can be freely changed to whatever is intuitive.
#
# `smartctl -a /dev/ada1` will list all properties of the drive including
# serial number which is used below.
################################################################################

gpart create -s gpt ada1
gpart add -t freebsd-zfs -l bay2_WCAWZ0415892 -b 1M -a 4096 ada1
gpart create -s gpt ada2
gpart add -t freebsd-zfs -l bay3_WCAWZ0416712 -b 1M -a 4096 ada2
gpart create -s gpt ada3
gpart add -t freebsd-zfs -l bay4_WCAWZ0424121 -b 1M -a 4096 ada3

################################################################################
# Create gnop translation devices with 4096 sector sizes to force ZFS to
# ignore 512 byte block size simulated by the drives.
################################################################################

gnop create -S 4096 gpt/bay2_WCAWZ0415892
gnop create -S 4096 gpt/bay3_WCAWZ0416712
gnop create -S 4096 gpt/bay4_WCAWZ0424121 

################################################################################
# Build the ZFS array using the translations.
#
# The name of the array used here and for the remaining guide is 'zfs'.
################################################################################

zpool create zfs raidz /dev/gpt/bay2_WCAWZ0415892.nop /dev/gpt/bay3_WCAWZ0416712.nop /dev/gpt/bay4_WCAWZ0424121.nop

################################################################################
# Build datasets as needed
################################################################################

zfs create zfs/data
zfs set compression=lz4 zfs/data
zfs create zfs/homedirs
zfs create zfs/homedirs/public
zfs create zfs/homedirs/jason
zfs set compression=lz4 zfs/homedirs/jason
zfs create zfs/homedirs/common_media
zfs create zfs/homedirs/common_assorted
zfs set compression=lz4 zfs/homedirs/common_assorted
zfs create zfs/homedirs/common_photo_albums
zfs set dedup=on zfs/homedirs/common_photo_albums
zfs create zfs/local
zfs create zfs/local/pgsql_backups
chown 70:70 /zfs/local/pgsql_backups; chmod 700 /zfs/local/pgsql_backups
zfs create zfs/local/pgsql
zfs set recordsize=8k zfs/local/pgsql
zfs set primarycache=metadata zfs/local/pgsql
zfs set compression=lz4 zfs/local/pgsql
zfs set atime=off zfs/local/pgsql
chown 70:70 /zfs/local/pgsql; chmod 700 /zfs/local/pgsql
zfs create zfs/local/jails
zfs create zfs/local/jails/archive

################################################################################
# Emergency conversion from booting from UFS SSD to booting from existing RAIDZ
#
# Note: This may not be 100% ideal. However due to a sporadic hardware failure
# of the system boot SSD, the system was converted to boot from the ZFS RAID.
# The gpart partitioning used left a 2MB padding at the start of the disk that
# allowed setting up a freebsd-boot partition. Combined with ZFS being, well,
# amazingly flexible and FreeBSD being easily installed manually by untarring
# its tarballs this was easy to pull off without any loss of data.
#
# All steps were done from the installer's Live CD mode
################################################################################

# Write ZFS bootloader code
gpart add -t freebsd-boot -l bay2_bootcode -s 128k ada0
gpart add -t freebsd-boot -l bay3_bootcode -s 128k ada1
gpart add -t freebsd-boot -l bay4_bootcode -s 128k ada2
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 2 ada0
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 2 ada1
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 2 ada2

# Force import
zpool import -f -o altroot=/mnt zfs

# Create requisite datasets based off 10.1-RELEASE layout
zfs create -o compression=lz4 -o atime=off -o mountpoint=none zfs/ROOT
zfs create -o compression=lz4 -o atime=off -o mountpoint=/ zfs/ROOT/default
zfs create -o compression=lz4 -o atime=off -o mountpoint=/tmp -o exec=on -o setuid=off zfs/tmp
zfs create -o compression=lz4 -o atime=off -o mountpoint=/usr -o canmount=off zfs/usr
zfs create -o compression=lz4 -o atime=off zfs/usr/doc
chown jason:unovitch /mnt/usr/doc
zfs create -o compression=lz4 -o atime=off zfs/usr/home
zfs create -o compression=lz4 -o atime=off zfs/usr/obj
zfs create -o compression=lz4 -o atime=off -o setuid=off zfs/usr/ports
zfs create -o compression=lz4 -o atime=off zfs/usr/src
zfs create -o compression=lz4 -o atime=off -o mountpoint=/var -o canmount=off zfs/var
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zfs/var/audit
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zfs/var/crash
zfs create -o compression=lz4 -o atime=off -o exec=off -o setuid=off zfs/var/log
zfs create -o compression=lz4 -o atime=on zfs/var/mail
zfs create -o compression=lz4 -o atime=off -o setuid=off zfs/var/tmp
zfs create -V 16G zfs/swap
zfs set org.freebsd:swap=on zfs/swap

# Install FreeBSD
cd /usr/freebsd-dist/
sh -c 'for file in base.txz lib32.txz kernel.txz doc.txz games.txz; do tar --unlink -xvpJf $file -C /mnt; done'
zpool set bootfs=zfs/ROOT/default zfs

echo 'zfs_load="YES"' >> /mnt/boot/loader.conf
echo 'zfs_enable="YES"' >> /mnt/etc/rc.conf
touch /mnt/etc/fstab

zfs unmount -a
shutdown -r now

################################################################################
# Export the zpool
################################################################################

zpool export zfs

################################################################################
# Trash the gnops
################################################################################

gnop destroy /dev/gpt/bay2_WCAWZ0415892.nop
gnop destroy /dev/gpt/bay3_WCAWZ0416712.nop
gnop destroy /dev/gpt/bay4_WCAWZ0424121.nop

################################################################################
# Re-import the zpool
################################################################################

zpool import -d /dev/gpt zfs

################################################################################
# Make sure the datasets set up are present and mounted
################################################################################

ls -l /zfs

################################################################################
# Verify ashift = 12 shows up
################################################################################

zdb 

################################################################################
# Kick off scrub via cron the first Monday of every month to keep scrubs from
# slowing down other cron jobs that run throughout the week. If this by some
# chance fails, the periodic.conf job is enabled in the next lines and the
# default of 35 days will ensure a scrub gets run routinely.
################################################################################

printf '0\t4\t*\t*\tmon\t[ $(/bin/date +\\%%d) -le 7 ] && /sbin/zpool scrub zfs\n' >> /var/cron/tabs/root

################################################################################
# If all is well, enable reporting during daily updates.
################################################################################

echo 'daily_status_zfs_enable="YES"' >> /etc/periodic.conf
echo 'daily_scrub_zfs_enable="YES"' >> /etc/periodic.conf

################################################################################
# Quick Rolling snapshot scripts for a month's worth of snapshot along with
# a permanent snapshot made on the first of every month. 
################################################################################

cat > /usr/local/etc/periodic/daily/900.rollingsnap << 'EOF'
#!/bin/sh
_30DAYSAGO=$(/bin/date -v -30d "+%Y%m%d")
_SNAPDATE=$(/bin/date "+%Y%m%d")

zfs destroy -r zfs/homedirs@$_30DAYSAGO-autodaily > /dev/null 2>&1
zfs snapshot -r zfs/homedirs@$_SNAPDATE-autodaily
zfs destroy -r zfs/data@$_30DAYSAGO-autodaily > /dev/null 2>&1
zfs snapshot -r zfs/data@$_SNAPDATE-autodaily
'EOF'
chmod 555 /usr/local/etc/periodic/daily/900.rollingsnap

cat > /usr/local/etc/periodic/monthly/900.monthlysnap << 'EOF'
#!/bin/sh
_SNAPDATE=$(/bin/date "+%Y%m%d")
zfs rename -r zfs/homedirs@$_SNAPDATE-autodaily @$_SNAPDATE-automonthly > /dev/null 2>&1
zfs rename -r zfs/data@$_SNAPDATE-autodaily @$_SNAPDATE-automonthly > /dev/null 2>&1
'EOF'
chmod 555 /usr/local/etc/periodic/monthly/900.monthlysnap

################################################################################
##----------------------------------------------------------------------------##
##                    Configure Host System NFS Support                       ##
##----------------------------------------------------------------------------##
################################################################################
# Enable jail friendly NFS Support. NFSv4 is currently in use and the prior
# v2/v3 configurations are available but commented out.
################################################################################

touch /etc/exports
echo '' >> /etc/rc.conf
echo '# NFS V2/V3 Support' >> /etc/rc.conf
echo '#rpcbind_enable="YES"' >> /etc/rc.conf
echo '#rpcbind_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#nfs_server_enable="YES"' >> /etc/rc.conf
echo '#nfs_server_flags="-u -t -n 4 -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#mountd_enable="YES"' >> /etc/rc.conf
echo '#mountd_flags="-r -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#rpc_lockd_enable="YES"' >> /etc/rc.conf
echo '#rpc_lockd_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#rpc_statd_enable="YES"' >> /etc/rc.conf
echo '#rpc_statd_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# NFSv4 Configuration' >> /etc/rc.conf
echo 'nfs_server_enable="YES"' >> /etc/rc.conf
echo 'nfsv4_server_enable="YES"' >> /etc/rc.conf
echo 'nfsuserd_enable="YES"' >> /etc/rc.conf
echo 'nfsuserd_flags="-domain mydomain.name 2"' >> /etc/rc.conf
echo 'nfs_server_flags="-u -t -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo 'rpcbind_enable="YES"' >> /etc/rc.conf
echo 'rpcbind_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo 'mountd_enable="YES"' >> /etc/rc.conf
echo 'mountd_flags="-r -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf

################################################################################
# Configure the /etc/exports file for NFSv4 mounts. This won't be required if
# not using NFSv4 and only the next two commands would apply.
# http://forums.freebsd.org/showthread.php?p=135531
################################################################################

echo 'V4: / -sec=sys -network 10.100.0.0 -mask 255.255.0.0' >> /etc/exports

################################################################################
# Enable the 'sharenfs' property on the ZFS set and sharing of /usr/home
# Be aware of the security implications of using "-maproot=root".
#
# This is mainly to make sure root on the Linux NFS clients can read the
# .encfs6.xml file used by my EncFS home directors and easily change
# permissions.
################################################################################

zfs set sharenfs='-network 10.100.0.0 -mask 255.255.0.0 -maproot=root' zfs/homedirs

################################################################################
# Lock to NFSv4 only (optional)
################################################################################

echo '' >> /etc/sysctl.conf
echo '# NFSv4 Support Only' >> /etc/sysctl.conf
echo 'vfs.nfsd.server_min_nfsvers=4' >> /etc/sysctl.conf
echo '' >> /etc/sysctl.conf
echo '# Enable Linux clients using UID instead of name (10.1-RELEASE and up only)' >> /etc/sysctl.conf
echo 'vfs.nfsd.enable_stringtouid=1' >> /etc/sysctl.conf
sysctl vfs.nfsd.server_min_nfsvers=4
sysctl vfs.nfsd.enable_stringtouid=1

################################################################################
# Start & control NFS servers
#
# For NFSv4, all services can be completely stopped with:
# service nfsd stop ; service mountd stop ; service rpcbind stop ; service nfsuserd stop
# All services can be started with:
# service nfsd start
#
# For NFSv2/v3, all services can be completely stopped with:
# service statd stop ; service lockd stop ; service nfsd stop ; service mountd stop ; service rpcbind stop
# All services can be started with:
# service rpcbind start && service mountd start && service nfsd start && service lockd start
#
# For all NFS versions, if the '/etc/exports' is changed it can be refreshed by:
# service mountd reload
#
# Changing `zfs set sharenfs...` automatically does this and will update
# the '/etc/zfs/exports' file for you.
#
################################################################################

service nfsd start

################################################################################
##----------------------------------------------------------------------------##
##                    Configure Host System SMB Support                       ##
##----------------------------------------------------------------------------##
################################################################################
# Enable jail friendly SMB support with Samba.
################################################################################

# Installed with PAM_SMBPASS from local pkg repo
pkg install net/samba41

sysrc kld_list="`sysrc -ni kld_list` aio"
kldload aio

cat > /usr/local/etc/smb4.conf << 'EOF'
[global]
    interfaces = 10.100.102.2/32 127.0.0.1/32
    hosts allow = 10.100.
    bind interfaces only = yes
    case sensitive = yes
    security = user

    unix extensions = no
    nt acl support = yes
    inherit acls = no
    map acl inherit = yes

[homedirs]
    path = /zfs/homedirs
    comment = Home Directories
    vfs objects = zfsacl
    nfs4:mode = special
    nfs4:acedup = merge
    nfs4:chown = yes
    available = yes
    browseable = yes
    read only = no
    public = no
    guest ok = no
    writable = yes
'EOF'

# Patch to allow PAM to create users upon SSH login
patch /etc/pam.d/sshd << 'EOF'
--- /root/sshd	2014-11-30 19:14:17.000000000 +0000
+++ /etc/pam.d/sshd	2014-11-30 19:24:09.000000000 +0000
@@ -10,6 +10,7 @@
 #auth		sufficient	pam_krb5.so		no_warn try_first_pass
 #auth		sufficient	pam_ssh.so		no_warn try_first_pass
 auth		required	pam_unix.so		no_warn try_first_pass
+auth		optional	/usr/local/lib/pam_smbpass.so	try_first_pass migrate
 
 # account
 account		required	pam_nologin.so
'EOF'

# Patch to allow passwd command to automatically update smbpasswd
patch /etc/pam.d/passwd << 'EOF'
--- /root/passwd	2014-11-30 18:47:55.000000000 +0000
+++ /etc/pam.d/passwd	2014-11-30 19:33:31.000000000 +0000
@@ -9,3 +9,4 @@
 # password
 #password	requisite	pam_passwdqc.so		enforce=users
 password	required	pam_unix.so		no_warn try_first_pass nullok
+password	optional	/usr/local/lib/pam_smbpass.so	try_first_pass migrate
'EOF'

sysrc samba_server_enable=YES
service samba_server start

################################################################################
##----------------------------------------------------------------------------##
##                      Poudriere PKG Build Configuration                     ##
##----------------------------------------------------------------------------##
################################################################################
# Set Up Poudriere PKG build system now that ZFS is fully setup.  All jails will
# be mapped to a local folder as their repository and the FTP jail will also 
# share this package repo to the internal network. Once testing for a jail is
# done, the idea is to migrate the packages and configuration into Poudriere and
# do pkg upgrade in the future rather than compiling software in each jail.
#
# Helpful Links:
# http://forums.freebsd.org/showthread.php?t=38859
# http://blog.etoilebsd.net/post/Home_made_pkgng_repo
# https://fossil.etoilebsd.net/poudriere/doc/trunk/doc/pkgng_repos.wiki
################################################################################

# Install Poudriere
pkg install ports-mgmt/poudriere-devel

# Backup and change default configuration variables
cd /usr/local/etc && cp poudriere.conf.sample poudriere.conf
perl -pwi -e 's^#ZPOOL=tank^ZPOOL=zfs^g' poudriere.conf
perl -pwi -e 's^_PROTO_://_CHANGE_THIS_^http://ftp.freebsd.org^g' poudriere.conf
perl -pwi -e 's^BASEFS=/usr/local/poudriere^BASEFS=/zfs/poudriere^g' poudriere.conf

# Setup Poudriere to use the current host /usr/ports as the default
poudriere ports -c -F -f none -M /usr/ports -p default

# Setup 10.1-RELEASE build environments
poudriere jails -c -j 101amd64 -v 10.1-RELEASE -a amd64
poudriere jails -c -j 101i386 -v 10.1-RELEASE -a i386
# Setup alternate build environments for testing ports
poudriere jails -c -j 93amd64 -v 9.3-RELEASE -a amd64
poudriere jails -c -j 93i386 -v 9.3-RELEASE -a i386
poudriere jails -c -j 84amd64 -v 8.4-RELEASE -a amd64
poudriere jails -c -j 84i386 -v 8.4-RELEASE -a i386

# Setup make.conf variables for build jail
cat > /usr/local/etc/poudriere.d/101amd64-make.conf << 'EOF'
DEFAULT_VERSIONS= ruby=2.1 perl5=5.20 mysql=5.5m pgsql=9.4
ffmpeg_SET+=RTMP X11GRAB FAAC LAME AMR_NB AMR_WB ASS
gnutls_UNSET+=TPM
rubygem-passenger_UNSET+=APACHE22
rubygem-passenger_SET+=NGINX
net-mgmt_collectd5_SET+=CURL MYSQL NUTUPS PING PGSQL STATGRAB XML
net_samba41_SET+=PAM_SMBPASS
net_unison240_UNSET+=X11
nginx_SET+=PASSENGER HTTP_FANCYINDEX
'EOF'

# Do hard links to make this the default for all build jails
ln 101amd64-make.conf 101i386-make.conf
ln 101amd64-make.conf 93amd64-make.conf
ln 101amd64-make.conf 93i386-make.conf
ln 101amd64-make.conf 84amd64-make.conf
ln 101amd64-make.conf 84i386-make.conf

# Setup a package list of all ports used on host and in jails
cat > /zfs/poudriere/pkg_list << 'EOF'
########## Host and Jail programs ##########
ports-mgmt/pkg
ports-mgmt/pkg-devel
ports-mgmt/portmaster
ports-mgmt/poudriere-devel
ports-mgmt/dialog4ports
ports-mgmt/portlint
devel/rclint
sysutils/tmux
shells/bash
lang/perl5.20
dns/unbound
net/openntpd
mail/opensmtpd
sysutils/pstree
net-mgmt/iftop
sysutils/cmdwatch
sysutils/tree
sysutils/bsdstats
security/clamav
editors/vim-lite
devel/checkbashisms
sysutils/ipmitool
sysutils/nut
security/logcheck
sysutils/panicmail
sysutils/smartmontools
sysutils/ncdu
sysutils/duff
net/rsync
net/unison240
net/unison-nox11
sysutils/zfs-stats
sysutils/beadm
net/samba41
sysutils/ezjail
security/sudo
net-mgmt/collectd5
benchmarks/iperf
shells/mksh
sysutils/DTraceToolkit
########## Serviio Jail ##########
net/serviio
graphics/dcraw
########## PHP5 and dependencies listed by-name for Serviio ##########
lang/php56
ftp/php56-curl
textproc/php56-xml
converters/php56-mbstring
devel/php56-json
textproc/php56-simplexml
textproc/php56-dom
########## Owncloud Jail##########
www/owncloud
########## Puppet/Foreman/Web Applications Jails ##########
sysutils/puppet
sysutils/puppet-lint
devel/git
devel/ruby-gems
devel/rubygem-rake
devel/gmake
lang/gcc
lang/gcc47
www/rubygem-passenger
www/nginx
sysutils/rubygem-bundler
devel/libvirt
textproc/libxslt
www/node
databases/sqlite3
databases/mariadb55-client
databases/postgresql94-client
net/foreman-proxy
www/py-graphite-web
databases/py-psycopg2
www/uwsgi
########## MariaDB Jail ##########
databases/mariadb55-server
########## PostgreSQL Jail ##########
databases/postgresql94-server
########## Name Server/TFTP Jail ##########
dns/bind910
ftp/tftp-hpa
'EOF'

# Start a bulk build of all ports in that list
poudriere bulk -f /zfs/poudriere/pkg_list -j 101amd64
poudriere bulk -f /zfs/poudriere/pkg_list -j 101i386

# Allow host to install from Poudriere Repo
mkdir -p /usr/local/etc/pkg/repos
cat >> /usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "file:///zfs/poudriere/data/packages/101amd64-default",
}
FreeBSD: {
  enabled: no
}
'EOF'

# - To update a jail with latest security patches but stay at the same version:
# poudriere jail -u -j jailname
# - To upgrade to a newer version of FreeBSD, let's say from 9.0 to 9.1:
# poudriere jail -u -t 9.1-RELEASE -j jailname

# Optional Patch to add link to local package repo on Poudriere index page
cat > /home/jason/poudriere-index.patch << 'EOF'
--- /usr/local/share/poudriere/html/index.html	2014-09-27 01:12:10.000000000 +0000
+++ /usr/local/share/poudriere/html/index.html	2014-09-27 01:18:53.000000000 +0000
@@ -28,6 +28,7 @@
 							<ul class="nav navbar-nav nav-pills pull-left">
 								<li><a title="top" href="#top"><span class="glyphicon glyphicon-chevron-up"></span></a></li>
 								<li><a href="#latest_builds">Latest Builds</a></li>
+								<li><a href="pkgrepo/"><span class="glyphicon glyphicon-share-alt"></span>Local Package Repository</a></li>
 								<li class="dropdown">
 									<a href="#" class="dropdown-toggle" data-toggle="dropdown">Logs <b class="caret"></b></a>
 									<ul class="dropdown-menu">
'EOF'
patch < /home/jason/poudriere-index.patch
pkg check -r poudriere-devel

# Cron entries to automate
echo 'MAILTO=jason' >> /var/cron/tabs/root
echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin' >> /var/cron/tabs/root
printf "30\t5\t*\t*\twed\tportsup; nice poudriere bulk -f /zfs/poudriere/pkg_list -j 84amd64;  nice poudriere bulk -f /zfs/poudriere/pkg_list -j 84i386\n" >> /var/cron/tabs/root
printf "30\t5\t*\t*\tthu\tportsup; nice poudriere bulk -f /zfs/poudriere/pkg_list -j 93amd64;  nice poudriere bulk -f /zfs/poudriere/pkg_list -j 93i386\n" >> /var/cron/tabs/root
printf "30\t5\t*\t*\tfri\tportsup; nice poudriere bulk -f /zfs/poudriere/pkg_list -j 101amd64; nice poudriere bulk -f /zfs/poudriere/pkg_list -j 101i386\n" >> /var/cron/tabs/root

################################################################################
##----------------------------------------------------------------------------##
##                    Host System Initial Jail Configuration                  ##
##----------------------------------------------------------------------------##
################################################################################
# Setup Ezjail scripts
#
# Type this to allow pings from inside the jail for testing purposes
# sysctl security.jail.allow_raw_sockets=1
################################################################################

pkg install sysutils/ezjail

# FreeBSD 10+ devfs handling (rules must be numbers not names)
sed -i '' -e 's/# ezjail_devfs_ruleset="devfsrules_jail"/ezjail_devfs_ruleset="4"/' /usr/local/etc/ezjail.conf

# Backup to zfs
sed -i '' -e 's^# ezjail_archivedir="${ezjail_jaildir}/ezjail_archives"^ezjail_archivedir=/zfs/local/jails/archive^' /usr/local/etc/ezjail.conf

# Define default jail stop command to ensure graceful shutdown of jails
echo 'ezjail_exec_stop="/bin/sh /etc/rc.shutdown"' >> /usr/local/etc/ezjail.conf

# Disable ugly Perl hack
sed -i '' -e 's^# ezjail_uglyperlhack="YES"^ezjail_uglyperlhack="NO"^' /usr/local/etc/ezjail.conf

# Enable Ezjail ZFS
sed -i '' -e 's^# ezjail_jaildir=/zfs/jails^ezjail_jaildir=/zfs/jails^' /usr/local/etc/ezjail.conf
sed -i '' -e 's^# ezjail_use_zfs="YES"^ezjail_use_zfs="YES"^' /usr/local/etc/ezjail.conf
sed -i '' -e 's^# ezjail_use_zfs_for_jails="YES"^ezjail_use_zfs_for_jails="YES"^' /usr/local/etc/ezjail.conf
sed -i '' -e 's^# ezjail_jailzfs="tank/ezjail"^ezjail_jailzfs="zfs/jails"^' /usr/local/etc/ezjail.conf
sed -i '' -e 's^# ezjail_zfs_properties="-o compression=lzjb -o atime=off"^ezjail_zfs_properties="-o compression=lz4 -o atime=off"^' /usr/local/etc/ezjail.conf
sed -i '' -e 's^# ezjail_default_retention_policy^ezjail_default_retention_policy^' /usr/local/etc/ezjail.conf

# Install ezjail
ezjail-admin install
ezjail-admin update -P

################################################################################
# Make SSH jail friendly by not allowing it to listen to all IP aliases
################################################################################

perl -pwi -e 's^#ListenAddress\ 0\.0\.0\.0^ListenAddress 10.100.102.2^g' /etc/ssh/sshd_config
perl -pwi -e 's^#ListenAddress\ ::^ListenAddress 2001:123:4:5678::2^g' /etc/ssh/sshd_config
service sshd restart

################################################################################
# Configure systemwide jail settings
################################################################################

# Enable jails in rc.conf
echo '' >> /etc/rc.conf
echo '# Ezjail Configuration' >> /etc/rc.conf
echo 'ezjail_enable="YES"' >> /etc/rc.conf

# Do automated jail snapshots only once a day, otherwise 'ezjail-admin snapshot'
# could be run on the host anytime maintenance is done.
echo '/usr/local/bin/ezjail-admin snapshot' >> /usr/local/etc/periodic/daily/900.rollingsnap

# Enable HTTP and DATA Accept filters for some of the jails to use
sysrc kld_list="`sysrc -ni kld_list` accf_http"
sysrc kld_list="`sysrc -ni kld_list` accf_data"
kldload accf_http
kldload accf_data

# Put commented block for enabling raw sockets in sysctl.conf if needed later on
echo '' >> /etc/sysctl.conf
echo '# Uncomment to allow pings within a jail on upon reboot' >> /etc/sysctl.conf
echo '#security.jail.allow_raw_sockets=1' >> /etc/sysctl.conf

# Copy package repo to basejail and map default myrepo.conf to use it
mkdir -p /zfs/jails/newjail/pkgrepo
mkdir -p /zfs/jails/flavours/example/usr/local/etc/pkg/repos
cat >> /zfs/jails/flavours/example/usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "file:///pkgrepo/101amd64-default",
}
FreeBSD: {
  enabled: no
}
'EOF'

# Copy .ssh directory for my user to the root user of each jail
cp -a /usr/home/jason/.ssh /zfs/jails/newjail/root/
chown -R root:wheel /zfs/jails/newjail/root/.ssh

# Enable logging in as root with SSH keys
perl -pwi -e 's^#PermitRootLogin no^PermitRootLogin without-password^g' /zfs/jails/newjail/etc/ssh/sshd_config

# Disable useless cron entries to prevent them spamming syslog
perl -pwi -e 's^1,31\t0-5\t\*\t\*\t\*\troot\tadjkerntz -a^#1,31\t0-5\t\*\t\*\t\*\troot\tadjkerntz -a^' /zfs/jails/newjail/etc/crontab

# Set up remaining for all jail's rc.conf
perl -pwi -e 's^# sshd_enable="YES"^sshd_enable="YES"^g' /zfs/jails/flavours/example/etc/rc.conf
perl -pwi -e 's^syslogd_flags="-ss"^syslogd_flags="-s -v -v"^g' /zfs/jails/flavours/example/etc/rc.conf
perl -pwi -e 's^#*.*\t\t\t\t\t\t\@loghost^*.*\t\t\t\t\t\t\@10.100.102.2^g' /zfs/jails/newjail/etc/syslog.conf

cat >> /zfs/jails/flavours/example/etc/rc.conf << 'EOF'

# Kernel Secure Level
kern_securelevel_enable="YES"
kern_securelevel="3"

# Clear Tmp
clear_tmp_enable="YES"
'EOF'

# Configure baseline periodic.conf for all jail templates.
# periodic.conf.local will be used for any things specific to one jail only.
cat >> /zfs/jails/flavours/example/etc/periodic.conf << 'EOF'
##### General formatting for all jails
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks for all jails
daily_status_disks_enable="NO"
daily_status_rwho_enable="NO"
daily_status_security_kernelmsg_enable="NO"
##### Checks to enable for all jails
daily_clean_tmps_enable="YES"
daily_status_security_pkg_checksum_enable="YES"
'EOF'

################################################################################
# Quick script to display all periodic log files in all running jails.
################################################################################

cat > /usr/local/etc/periodic/daily/999.jail-periodic-daily << 'EOF'
#!/bin/sh
#
# /usr/local/etc/periodic/daily/999.jail-periodic-daily 2014-02-01
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

: ${daily_jail_periodic_ignore_length="0"}

case "$daily_jail_periodic_enable" in
    [Yy][Ee][Ss])
        paths=`jls | awk '{ print $4 }' | sort`
        for path in $paths; do
            if [ -f ${path}/var/log/daily.log ]; then
                LENGTH=`grep -vc newsyslog ${path}/var/log/daily.log`
                if [ $LENGTH -ne $daily_jail_periodic_ignore_length ]; then
                    echo ""
                    echo "daily periodic log in $path"
                    grep -v newsyslog ${path}/var/log/daily.log
                fi
            fi
        done && rc=1
        ;;
    *)
        rc=0
        ;;
esac

exit $rc
'EOF'

perl -p -e 's/daily/weekly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
perl -p -e 's/daily/monthly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

chmod 555 /usr/local/etc/periodic/daily/999.jail-periodic-daily
chmod 555 /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
chmod 555 /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

cat >> /etc/periodic.conf << 'EOF'
##### Show jail periodic checks in host periodic
daily_jail_periodic_enable="YES"
daily_jail_periodic_ignore_length="4"
weekly_jail_periodic_enable="YES"
weekly_jail_periodic_ignore_length="4"
monthly_jail_periodic_enable="YES"
'EOF'

################################################################################
# Create Jail flavours based on network segment 
################################################################################

cd /zfs/jails/flavours/
cp -Rp example dmz
cp -Rp example lan

################################################################################
# DMZ-specific segment config
################################################################################

echo 'search pa-us.mydomain.name. nc-us.mydomain.name.' >> /zfs/jails/flavours/dmz/etc/resolv.conf
echo 'nameserver 192.168.102.1' >> /zfs/jails/flavours/dmz/etc/resolv.conf
echo 'nameserver 192.168.102.2' >> /zfs/jails/flavours/dmz/etc/resolv.conf
echo 'options edns0' >> /zfs/jails/flavours/dmz/etc/resolv.conf

################################################################################
# LAN-specific segment config 
################################################################################

echo 'search pa-us.mydomain.name. nc-us.mydomain.name.' >> /zfs/jails/flavours/lan/etc/resolv.conf
echo 'nameserver 10.100.102.1' >> /zfs/jails/flavours/lan/etc/resolv.conf
echo 'nameserver 10.100.102.2' >> /zfs/jails/flavours/lan/etc/resolv.conf
echo 'options edns0' >> /zfs/jails/flavours/lan/etc/resolv.conf

################################################################################
##----------------------------------------------------------------------------##
##                     PostgreSQL Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# Useful references:
# http://daemon-notes.com/articles/network/postgresql

ezjail-admin create -f lan pgsql.pa-us.mydomain.name 10.100.102.17,2001:123:4:5678::17
mkdir -p /zfs/jails/pgsql.pa-us.mydomain.name/zfs/local/pgsql_backups
mkdir -p /zfs/jails/pgsql.pa-us.mydomain.name/zfs/local/pgsql
echo '/zfs/poudriere/data/packages /zfs/jails/pgsql.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.pgsql_pa_us_mydomain_name
echo '/zfs/local/pgsql_backups /zfs/jails/pgsql.pa-us.mydomain.name/zfs/local/pgsql_backups nullfs rw 0 0' >> /etc/fstab.pgsql_pa_us_mydomain_name
echo '/zfs/local/pgsql /zfs/jails/pgsql.pa-us.mydomain.name/zfs/local/pgsql nullfs rw 0 0' >> /etc/fstab.pgsql_pa_us_mydomain_name
perl -pwi -e 's/parameters=""/parameters="allow.sysvipc=1"/g' /usr/local/etc/ezjail/pgsql_pa_us_mydomain_name
ezjail-admin console -f pgsql.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Symlink /usr/local/pgsql before installing PostgreSQL to keep database on
# ZFS dataset with ideal options
ln -s /zfs/local/pgsql /usr/local/pgsql

# Install PostgreSQL with default options
pkg install postgresql94-server

cat >> /etc/login.conf << 'EOF'
postgres:\
	:lang=en_US.UTF-8:\
	:setenv=LC_COLLATE=C:\
	:tc=default:
'EOF'
cap_mkdb /etc/login.conf

# Enable and start PostgreSQL
echo 'postgresql_enable="YES"' >> /etc/rc.conf.local
echo 'postgresql_class="postgres"' >> /etc/rc.conf.local
service postgresql initdb
service postgresql start

echo 'daily_pgsql_backup_enable="YES"' >> /etc/periodic.conf.local
echo 'daily_pgsql_backupdir="/zfs/local/pgsql_backups"' >> /etc/periodic.conf.local
echo 'daily_pgsql_vacuum_enable="YES"' >> /etc/periodic.conf.local

# Create users and databases
su - pgsql
createuser -sdrP admin

# Generate random passwords for each database
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Foreman
createuser foreman
createdb -O foreman -e foreman
psql -c "ALTER USER foreman WITH ENCRYPTED PASSWORD 'foreman_password'"
# Graphite
createuser graphite
createdb -O graphite -e graphite
psql -c "ALTER USER graphite WITH ENCRYPTED PASSWORD 'graphite_password'"
# Collectd
createuser collectd
psql -c "ALTER USER collectd WITH ENCRYPTED PASSWORD 'collectd_password'"
exit

# Back as root user, enable tracking statistics then enable access control for designated hosts
sed -i '' -e 's/#track_activities = on/track_activities = on/g' /usr/local/pgsql/data/postgresql.conf
sed -i '' -e 's/#track_counts = on/track_counts = on/g' /usr/local/pgsql/data/postgresql.conf
sed -i '' -e 's/#track_functions = none/track_functions = all/g' /usr/local/pgsql/data/postgresql.conf
echo "host all all 10.100.102.11/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 10.100.102.12/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 10.100.102.17/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host graphite graphite 10.100.102.19/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 2001:123:4:5678::11/128 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 2001:123:4:5678::12/128 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 2001:123:4:5678::17/128 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host graphite graphite 2001:123:4:5678::19/128 md5" >> /usr/local/pgsql/data/pg_hba.conf

# Reload service to apply postgresql.conf and pg_hba.conf changes
service postgresql reload

# Restoring from a backup
su - pgsql
cd /zfs/local/pgsql_backups
# Restore 1
pg_restore pgdump_<db>_<date>
# Restore all (example for backups on 2015-01-10)
gunzip -c pgglobals_2015-01-10T03:01:34.gz | psql
dropdb foreman
createdb -T template0 foreman
pg_restore --dbname=foreman pgdump_foreman_2015-01-10T03:01:34

################################################################################
##----------------------------------------------------------------------------##
##                       MariaDB Jail Configuration                           ##
##----------------------------------------------------------------------------##
################################################################################

ezjail-admin create -f lan mdbi.pa-us.mydomain.name 10.100.102.18,2001:123:4:5678::18
echo '/zfs/poudriere/data/packages /zfs/jails/mdbi.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.mdbi_pa_us_mydomain_name
ezjail-admin console -f mdbi.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Install MariaDB 5.5
pkg install mariadb55-server

# Enable and start MariaDB
cp /usr/local/share/mysql/my-medium.cnf /var/db/mysql/my.cnf
echo 'mysql_enable="YES"' >> /etc/rc.conf.local
service mysql-server start

# Prepare Database for use by running the secure installation.
# Choose a root password and answer yes to all questions.
mysql_secure_installation

# Login to MariaDB and create appropriate tables
# Sub with random passwords:  dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32
mysql -u root -p
CREATE DATABASE foreman CHARACTER SET utf8;
CREATE DATABASE foreman_test CHARACTER SET utf8;
CREATE USER 'foreman'@'10.100.102.11' IDENTIFIED BY 'foreman_password';
CREATE USER 'foreman'@'10.100.102.12' IDENTIFIED BY 'foreman_password';
GRANT ALL PRIVILEGES ON foreman.* TO 'foreman'@'10.100.102.11';
GRANT ALL PRIVILEGES ON foreman.* TO 'foreman'@'10.100.102.12';
GRANT ALL PRIVILEGES ON foreman_test.* TO 'foreman'@'10.100.102.11';
GRANT ALL PRIVILEGES ON foreman_test.* TO 'foreman'@'10.100.102.12';
flush privileges;
quit;

################################################################################
##----------------------------------------------------------------------------##
##          Puppet and Foreman on Nginx/Passenger Jail Configuration          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://docs.puppetlabs.com/guides/installation.html
# https://help.ubuntu.com/11.04/serverguide/puppet.html
#
# All configuration files will be under /usr/local/etc/puppet
# All state files are under /var/puppet
################################################################################

ezjail-admin create -f lan apps1.pa-us.mydomain.name 10.100.102.11,2001:123:4:5678::11
mkdir -p /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere
mkdir -p /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere_logs
mkdir -p /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/pkg
mkdir -p /zfs/jails/apps1.pa-us.mydomain.name/zfs/data
echo '/usr/local/share/poudriere/html /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/poudriere/data/logs/bulk /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere_logs nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /zfs/jails/apps1.pa-us.mydomain.name/usr/local/www/pkg nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /zfs/jails/apps1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/data /zfs/jails/apps1.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
ezjail-admin console -f apps1.pa-us.mydomain.name
passwd

# Note that the backup jail will follow the majority of the same settings for redundancy
# and testing purposes.

ezjail-admin create -f lan apps2.pa-us.mydomain.name 10.100.102.12,2001:123:4:5678::12
mkdir -p /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere
mkdir -p /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere_logs
mkdir -p /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/pkg
mkdir -p /zfs/jails/apps2.pa-us.mydomain.name/zfs/data
echo '/usr/local/share/poudriere/html /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/poudriere/data/logs/bulk /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere_logs nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /zfs/jails/apps2.pa-us.mydomain.name/usr/local/www/pkg nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /zfs/jails/apps2.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/data /zfs/jails/apps2.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
ezjail-admin console -f apps2.pa-us.mydomain.name
passwd

# Both apps1 and apps2 will get the same steps from this point on with very minor changes
# between each other.

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Installing Dependencies:  Install Puppet, Git, Nginx, and Ruby Components

pkg install puppet rubygem-puppet-lint git nginx rubygem-rake rubygem-passenger rubygem-bundler libvirt mariadb55-client libxslt node sqlite3 postgresql94-client gcc47 gmake sudo foreman-proxy

# At this point, Puppet needs to be started so that all its SSL keys can be 
# generated. This gives the chance to test that Puppet does work before anything
# else gets stacked on as well as ensures the SSL keys referenced by Nginx's
# config file are in place before that step.

mkdir -p /usr/local/etc/puppet/manifests/
touch /usr/local/etc/puppet/manifests/site.pp
service puppetmaster onestart

# On the secondary apps server/Puppet, set the appropriate ca_server directive
# run the agent manually to generate appropriate keys.

echo "[main]" >> /usr/local/etc/puppet/puppet.conf
echo "ca = false" >> /usr/local/etc/puppet/puppet.conf
echo "ca_server = apps1.pa-us.mydomain.name" >> /usr/local/etc/puppet/puppet.conf
echo "dns_alt_names = foreman.pa-us.mydomain.name,foreman,puppet.pa-us.mydomain.name,puppet" >> /usr/local/etc/puppet/puppet.conf
puppet agent --test --waitforcert 10

# On the CA
puppet cert --allow-dns-alt-names sign apps2.pa-us.mydomain.name

# With initial setup of the Puppetmaster done, a RACK file that Nginx will use
# to start the Ruby application will be needed. Copy/paste the example.

mkdir -p /usr/local/etc/puppet/rack/public
cat > /usr/local/etc/puppet/rack/config.ru << 'EOF'
# Trimmed back FreeBSD Version of https://github.com/puppetlabs/puppet/blob/master/ext/rack/files/config.ru
$0 = "master"
require 'socket'
host = Socket.gethostname
ARGV << "--config_file_name" << "puppet.conf.#{host}"
ARGV << "--rack"
ARGV << "--confdir" << "/usr/local/etc/puppet"
ARGV << "--vardir" << "/var/puppet"
require 'puppet/util/command_line'
run Puppet::Util::CommandLine.new.execute
'EOF'
chown -R puppet:puppet /usr/local/etc/puppet/rack

# Installing Foreman from Git
mkdir /opt
cd /opt
git clone https://github.com/theforeman/foreman.git -b 1.9-stable
cd foreman
cp config/settings.yaml.example config/settings.yaml

# Enable download of Foreman Salt Plugins
echo "gem 'foreman_salt'" >> bundler.d/Gemfile.local.rb

# Note: rubygem-libv8 doesn't recognize current gcc47 and requires a link
# GCC and gmake are required to successfully build and install
cd /usr/local/bin && ln g++47 g++ && cd -
bundle config --local build.ruby-libvirt --with-libvirt-include=/usr/local/include/libvirt --with-libvirt-lib=/usr/local/lib/libvirt
bundle install --path vendor/bundle
rm /usr/local/bin/g++

# database.yml:  Copy the example database YAML file. Update with database information.
cd /opt/foreman/config
cat > database.yml << 'EOF'
# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: mysql2
  database: foreman_test
  username: foreman
  password: foreman_password
  host: 10.100.102.18

development:
  adapter: mysql2
  database: foreman
  username: foreman
  password: foreman_password
  host: 10.100.102.18

production:
  adapter: postgresql
  database: foreman
  username: foreman
  password: foreman_password
  host: 10.100.102.17
'EOF'

# Configure email server settings
cat > email.yaml << 'EOF'
# Outgoing email settings

production:
  delivery_method: :smtp
  smtp_settings:
    address: xts-bsd-lan.pa-us.mydomain.name
    port: 25
    domain: mydomain.name
    authentication: :none
'EOF'

# Update settings.yaml file
# Change certificate as needed
cat > settings.yaml << 'EOF'
---
# You must restart the Rack server after changing either of these values
# because they are cached at startup.
:unattended: true
:login: true
:require_ssl: true
:locations_enabled: false
:organizations_enabled: false
:support_jsonp: false
:mark_translated: false
:puppetconfdir: /usr/local/etc/puppet
:puppetvardir: /var/puppet
:ssl_ca_file: /var/puppet/ssl/certs/ca.pem
:ssl_certificate: /var/puppet/ssl/certs/apps1.pa-us.mydomain.name.pem
:ssl_priv_key: /var/puppet/ssl/private_keys/apps1.pa-us.mydomain.name.pem
'EOF'

# Update access perms on these files
chmod 640 settings.yaml
chmod 640 database.yml

# Generate keys with extra dns_alt_names to match
puppet cert generate apps1.pa-us.mydomain.name --dns_alt_names puppet,puppet.pa-us.mydomain.name,foreman,foreman.pa-us.mydomain.name
puppet cert generate apps2.pa-us.mydomain.name --dns_alt_names puppet,puppet.pa-us.mydomain.name,foreman,foreman.pa-us.mydomain.name

# Setup production database
env RAILS_ENV=production bundle exec rake db:migrate
env RAILS_ENV=production bundle exec rake db:seed

# Before going into a production environment, Foreman must precompile
# assets for production.
env RAILS_ENV=production bundle exec rake assets:precompile
env RAILS_ENV=production bundle exec rake locale:pack

# Testing That Foreman is Working
# Run Foreman using Ruby's built-in WEBrick server to validate functionality.
# It will be available at http://foreman:3000 and use the RAILS_ENV=development database.
env RAILS_ENV=production bundle exec rails server

# Manually create the 'foreman' user
pw groupadd -n foreman -g 813
pw useradd -n foreman -c "The Foreman,,," -u 813 -g foreman -d /opt/foreman -s /usr/sbin/nologin

# Add Puppet group access to Foreman so it can read what it needs to read
pw usermod foreman_proxy -G puppet
pw usermod foreman -G puppet
chmod g+r /var/puppet/ssl/private_keys/*

# Fix permissions on everything so far
mkdir /opt/foreman/tmp
chgrp -R foreman /opt/foreman
find /opt/foreman/tmp -type d -exec chmod g+rw {} \;
find /opt/foreman/tmp -type f -exec chmod g+rw {} \;
find /opt/foreman/log -type d -exec chmod g+rw {} \;
find /opt/foreman/log -type f -exec chmod g+rw {} \;

# Configuring Puppet
# All agent nodes have to be configured to submit reports to the master.
# The master has to be configured to send reports to Foreman.

# Grab Foreman report Ruby script
cd /usr/local/lib/ruby/site_ruby/2.1/puppet/reports
fetch -o foreman.rb https://raw.github.com/theforeman/puppet-foreman/master/files/foreman-report_v2.rb
sed -i '' -e 's^settings_file = "/etc/puppet/foreman.yaml"^settings_file = "/usr/local/etc/puppet/foreman.apps2.yaml"^' foreman.rb

# Changes to make in foreman_enc.rb
# Grab Foreman ENC Ruby script
cd /usr/local/etc/puppet
fetch https://raw.github.com/theforeman/puppet-foreman/master/files/external_node_v2.rb
cp external_node_v2.rb foreman_enc.apps1.pa-us.mydomain.name.rb
mv external_node_v2.rb foreman_enc.apps2.pa-us.mydomain.name.rb
sed -i '' -e 's^settings_file = "/etc/puppet/foreman.yaml"^settings_file = "/usr/local/etc/puppet/foreman.apps1.yaml"^' foreman_enc.apps1.pa-us.mydomain.name.rb
sed -i '' -e 's^settings_file = "/etc/puppet/foreman.yaml"^settings_file = "/usr/local/etc/puppet/foreman.apps2.yaml"^' foreman_enc.apps2.pa-us.mydomain.name.rb
sed -i '' -e 's^#\!/usr/bin/env ruby^#\!/usr/local/bin/ruby^' foreman_enc.apps1.pa-us.mydomain.name.rb
sed -i '' -e 's^#\!/usr/bin/env ruby^#\!/usr/local/bin/ruby^' foreman_enc.apps2.pa-us.mydomain.name.rb
chmod +x foreman_enc.apps1.pa-us.mydomain.name.rb
chmod +x foreman_enc.apps2.pa-us.mydomain.name.rb

# Create the Foreman config file for both to use
cat > /usr/local/etc/puppet/foreman.apps2.yaml << 'EOF'
---
:url: "https://foreman.pa-us.mydomain.name"
:ssl_ca: "/var/puppet/ssl/certs/ca.pem"
:ssl_cert: "/var/puppet/ssl/certs/apps2.pa-us.mydomain.name.pem"
:ssl_key: "/var/puppet/ssl/private_keys/apps2.pa-us.mydomain.name.pem"
:user: "foreman"
#:password: "<%= @foreman_password %>"
:puppetdir: "/var/puppet"
:puppetuser: "puppet"
:facts: true
:timeout: 10
:threads: null
'EOF'
cd /usr/local/etc/puppet
sed -e 's/apps2/apps1/g' foreman.apps2.yaml > foreman.apps1.yaml

# Example:
#   puppet.conf (on each agent)
#     [agent]
#       report = true
#
#   puppet.conf (on puppet master, update ENC as needed)
#     [master]
#       reports = store, foreman
#       node_terminus = exec
#       external_nodes = /usr/local/etc/puppet/foreman_enc.apps1.pa-us.mydomain.name.rb
#

# Running Foreman on a Production-Quality Server
# Configuring Nginx and Passenger
# Nginx/Passenger Instructions and Configuration was derived from these two examples 
# that refer to how to set it up on CentOS
#
# http://z0mbix.github.io/blog/2012/03/01/use-nginx-and-passenger-to-power-your-puppet-master/
# http://www.watters.ws/mediawiki/index.php/Configure_puppet_master_using_nginx_and_mod_passenger

mkdir /usr/local/etc/nginx/sites-enabled
mkdir /usr/local/etc/nginx/sites-available

cat > /usr/local/etc/nginx/nginx.conf << 'EOF'
user              www www;
worker_processes  2;
error_log         /var/log/nginx/error.log notice;
pid               /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include                  /usr/local/etc/nginx/sites-enabled/*;

    passenger_root           /usr/local/lib/ruby/gems/2.1/gems/passenger-5.0.13;
    passenger_ruby           /usr/local/bin/ruby;
    passenger_max_pool_size  10;
    passenger_pool_idle_time 300;

    include            mime.types;
    default_type       application/octet-stream;
    sendfile           off;
    tcp_nopush         on;
    keepalive_timeout  65;
    tcp_nodelay        on;

    # Allow gzipping js, css, log, svg and json files.
    gzip on;
    gzip_http_version 1.0;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_min_length  1100;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/gif image/jpeg image/png application/json image/svg+xml;

    types {
        text/plain                            log;
    }

    ssl_session_cache          shared:SSL:10m;
    ssl_session_timeout        35m;
    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                ALL:!aNULL:!eNULL:!DES:!3DES:!IDEA:!SEED:!DSS:!PSK:!RC4:!MD5:+HIGH:+MEDIUM:!LOW:!SSLv2:!EXP;
    ssl_prefer_server_ciphers  on;
    ssl_verify_client          optional;
    ssl_verify_depth           1;
}
'EOF'

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/foreman << 'EOF'
    server {
        listen       80 default_server;
        server_name  foreman.pa-us.mydomain.name foreman;

        passenger_enabled          on;
        passenger_user             foreman;
        passenger_group            foreman;

        access_log                 /var/log/nginx/foreman_http_access.log;
        root                       /opt/foreman/public;
    }
    server {
        listen       443 ssl accept_filter=dataready;
        server_name  foreman.pa-us.mydomain.name foreman accept_filter=dataready;

        passenger_enabled          on;
        passenger_set_header       X_CLIENT_DN $ssl_client_s_dn;
        passenger_set_header       X_CLIENT_VERIFY $ssl_client_verify;
        passenger_user             foreman;
        passenger_group            foreman;

        access_log                 /var/log/nginx/foreman_https_access.log;
        root                       /opt/foreman/public;
        ssl_certificate            /var/puppet/ssl/certs/apps1.pa-us.mydomain.name.pem;
        ssl_certificate_key        /var/puppet/ssl/private_keys/apps1.pa-us.mydomain.name.pem;
        ssl_crl                    /var/puppet/ssl/ca/ca_crl.pem;
        ssl_client_certificate     /var/puppet/ssl/certs/ca.pem;
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/foreman foreman

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/puppet << 'EOF'
    server {
        listen       8140 ssl accept_filter=dataready;
        server_name  puppet.pa-us.mydomain.name puppet accept_filter=dataready;

        passenger_enabled          on;
        passenger_set_header       X_CLIENT_DN $ssl_client_s_dn;
        passenger_set_header       X_CLIENT_VERIFY $ssl_client_verify;
        passenger_user             puppet;
        passenger_group            puppet;

        access_log                 /var/log/nginx/puppet_access.log;
        root                       /usr/local/etc/puppet/rack/public;
        # ssl_certifcate name must match host installed on (apps1|apps2)
        ssl_certificate            /var/puppet/ssl/certs/apps1.pa-us.mydomain.name.pem;
        ssl_certificate_key        /var/puppet/ssl/private_keys/apps1.pa-us.mydomain.name.pem;
        # copy ca certificates from apps1 -> apps2
        ssl_crl                    /var/puppet/ssl/ca/ca_crl.pem;
        ssl_client_certificate     /var/puppet/ssl/certs/ca.pem;
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/puppet puppet

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/poudriere << 'EOF'
    server {
        listen       80 accept_filter=httpready;
        server_name  poudriere.pa-us.mydomain.name poudriere accept_filter=httpready;
        root         /usr/local/www/poudriere;
        access_log   /var/log/nginx/poudriere_access.log;

        # Allow caching static resources
        location ~* ^.+\.(jpg|jpeg|gif|png|ico|svg|woff|css|js|html)$ {
            add_header Cache-Control "public";
            expires 2d;
        }

        location /pkgrepo {
            alias        /usr/local/www/pkg;
            fancyindex   on;
        }

        location /data {
            alias /usr/local/www/poudriere_logs;

            # Allow caching dynamic files but ensure they get rechecked
            location ~* ^.+\.(log|txz|tbz|bz2|gz)$ {
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            }

            # Don't log json requests as they come in frequently and ensure
            # caching works as expected
            location ~* ^.+\.(json)$ {
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
                access_log off;
                log_not_found off;
            }

            # Allow indexing only in log dirs
            location ~ /data/?.*/(logs|latest-per-pkg)/ {
                fancyindex   on;
            }

            break;
        }
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/poudriere poudriere

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/kickstart << 'EOF'
    server {
        listen       80;
        server_name  kickstart.pa-us.mydomain.name kickstart;

        access_log   /var/log/nginx/kickstart_access.log;
        root         /zfs/data/kickstart;
        fancyindex   on;
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/kickstart kickstart

# Create the log directory to prevent issues on startup.
mkdir /var/log/nginx

# Enable a daily log file rotation via newsyslog.conf
mkdir -p /usr/local/etc/newsyslog.conf.d
printf "/var/log/nginx/*.log\t\t\t644  7\t   *    @T00  JG    /var/run/nginx.pid  30\n" >> /usr/local/etc/newsyslog.conf.d/nginx.conf

# If the puppetmaster service is still running from earlier testing, stop it now
# Mark appropriate optiosn for hostname specific 
service puppetmaster onestop
echo 'puppetmaster_enable="NO"' >> /etc/rc.conf.local
echo 'puppetmaster_rundir="/var/run/puppet"' >> /etc/rc.conf.local

echo 'puppetmaster_flags="--config_file_name=puppet.conf.apps1.pa-us.mydomain.name --rundir=${puppetmaster_rundir}"' >> /etc/rc.conf.local
# or
echo 'puppetmaster_flags="--config_file_name=puppet.conf.apps2.pa-us.mydomain.name --rundir=${puppetmaster_rundir}"' >> /etc/rc.conf.local

# Enable nginx service and start it. At this point basic functionality is online.
echo 'nginx_enable="YES"' >> /etc/rc.conf.local
service nginx start

# Enabling the Filebucket Viewer
# EXAMPLE
#   site.pp (on puppet master)
# filebucket { "main":
#   server => "{your puppet master}",
#   path => false,
# }
#
# File { backup => "main" }

# With all the updates made, restart so that it takes effect.
service nginx restart

# For future maintenance, periodic jobs to prune old reports.
mkdir -p /usr/local/etc/periodic/weekly
cat > /usr/local/etc/periodic/weekly/clean_puppet_reports.sh << 'EOF'
#!/bin/sh
echo "Pruning Puppetmaster Reports greater than 7 days old"
echo -n "  Reports Removed:"
find /var/puppet/reports -type f -mtime +7 | xargs rm -v | wc -l
'EOF'
chmod 755 /usr/local/etc/periodic/weekly/clean_puppet_reports.sh

# And cron jobs for everything else
touch /var/log/foreman-cron.log
chown foreman:wheel /var/log/foreman-cron.log
cat > /var/cron/tabs/foreman << 'EOF'
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
RAILS_ENV=production
FOREMAN_HOME=/opt/foreman
# Clean up the session entries in the database
15 23 * * *     bundle exec rake db:sessions:clear >/var/log/foreman-cron.log 2>&1
# Send out daily summary
0 7 * * *       bundle exec rake reports:summarize >/var/log/foreman-cron.log 2>&1
# Expire old reports
30 7 * * *      bundle exec rake reports:expire >/var/log/foreman-cron.log 2>&1
# Collects trends data
*/30 * * * *    bundle exec rake trends:counter >/var/log/foreman-cron.log 2>&1
# Remove duplicate trends data
0 8 * * *       bundle exec rake trends:clean >/var/log/foreman-cron.log 2>&1
'EOF'

# Foreman Upgrade Process
# Minor Updates (Example: 1.8 to 1.8.1)
cd /opt/foreman
git pull
bundle update
passenger-config restart-app --name /opt/foreman/public

# Foreman Upgrade Process
# Major Updates (Example: 1.8 to 1.9)
rm /usr/local/etc/nginx/sites-enabled/foreman
service nginx reload
cd /opt/foreman
git pull
git checkout 1.9-stable
bundle update
# If bundle update fails, attempt removal and reinstall of all gems
#   cd /opt/foreman
#   rm -r vendor/bundle
#   rm Gemfile.lock
#   cd /usr/local/bin && ln g++47 g++ && cd -
#   mkdir vendor/bundle
#   chown foreman:foreman vendor/bundle
#   touch /opt/foreman/Gemfile.lock
#   chown foreman:foreman /opt/foreman/Gemfile.lock
#   bundle config --local build.ruby-libvirt --with-libvirt-include=/usr/local/include/libvirt --with-libvirt-lib=/usr/local/lib/libvirt
#   su -m foreman -c 'bundle install --path vendor/bundle'
#   rm /usr/local/bin/g++
# Database backup for major upgrades before any database migration (on database jail)
su - pgsql
cd /zfs/local/pgsql_backups
pg_dump -Fc foreman > $(/bin/date "+%Y%m%d")-foreman18.dump
# Back on Foreman
env RAILS_ENV=production bundle exec rake apipie:cache
env RAILS_ENV=production bundle exec rake db:migrate
env RAILS_ENV=production bundle exec rake db:seed
env RAILS_ENV=production bundle exec rake assets:precompile
env RAILS_ENV=production bundle exec rake locale:pack
# Fix Permissions
chgrp -R foreman /opt/foreman
# Enable site and restart Nginx
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/foreman foreman
service nginx reload

################################################################################
##                      APPS Jail: Carbon Jail Backend                        ##
################################################################################
# References:
# www.flagword.net/2014/01/installing-and-configuring-graphite-with-collectd-on-freebsd/
# forums.freebsd.org/viewtopic.php?f=39&t=45652

ezjail-admin create -f lan carbon.pa-us.mydomain.name 10.100.102.19,2001:123:4:5678::19
echo '/zfs/poudriere/data/packages /zfs/jails/carbon.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.carbon_pa_us_mydomain_name
ezjail-admin console -f carbon.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Install specific packages
pkg install www/py-graphite-web www/uwsgi databases/py-psycopg2

# Create carbon and carbon relay users
pw groupadd -n carbon -g 2003
pw useradd -n carbon -c "Carbon Daemon,,," -u 2003 -g carbon -d /nonexistent -s /sbin/nologin

# Configure Carbon and Carbon Relay
cd /usr/local/etc/carbon
patch /usr/local/etc/carbon/carbon.conf << 'EOF'
40c40
< USER =
---
> USER = carbon
'EOF'

patch /usr/local/etc/carbon/storage-schemas.conf << 'EOF'
14c14
< [default_1min_for_1day]
---
> [default]
16c16
< retentions = 60s:1d
---
> retentions = 2m:7d,10m:30d,60m:120d,300m:730d
'EOF'

# How to Resize Later
# su -m carbon -c 'find /var/db/carbon/whisper -type f -exec whisper-resize.py {} 2m:7d 10m:30d 60m:120d 300m:730d \;'
# Cleanup:
# find /var/db/carbon/whisper -name "*.bak" -exec rm '{}' \;

# Enable carbon services
echo 'carbon_enable="YES"' >> /etc/rc.conf.local

# Update permissions so carbon user can write to it's database directory
chown -R carbon:carbon /var/db/carbon

# Start Carbon services
service carbon start

# Generate Secret Key for Graphite
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Configure Graphite
patch /usr/local/etc/graphite/local_settings.py << 'EOF'
13c13
< #SECRET_KEY = 'UNSAFE_DEFAULT'
---
> SECRET_KEY = '4FE3cLxA3MtvN1G2KBSSUXxKFLk5KS7w'
23c23
< #TIME_ZONE = 'America/Los_Angeles'
---
> TIME_ZONE = 'America/New_York'
172,173c172,177
<                'NAME': '/var/db/graphite/graphite.db',
<                'ENGINE': 'django.db.backends.sqlite3',
---
>                'NAME': 'graphite',
>                'ENGINE': 'django.db.backends.postgresql_psycopg2',
>                'USER': 'graphite',
>                'PASSWORD': 'graphite_password',
>                'HOST': '10.100.102.17',
>                'PORT': '5432',
'EOF'

patch /usr/local/etc/graphite/graphite.wsgi << 'EOF'
2c2
< sys.path.append('/usr/local/graphite/webapp')
---
> sys.path.append('/usr/local/lib/python2.7/site-packages')
'EOF'

# Initialize user database and create the admin user:
python2 /usr/local/lib/python2.7/site-packages/graphite/manage.py syncdb

# Then build the index:
/usr/local/bin/build-index.sh

# Change the ownership of the user database so the webapp can write to it:
chown -R www:www /var/db/graphite/ /var/log/graphite/

echo 'uwsgi_enable="YES"' >> /etc/rc.conf.local
echo 'uwsgi_profiles="graphite"' >> /etc/rc.conf.local
echo 'uwsgi_graphite_enable="YES"' >> /etc/rc.conf.local
echo 'uwsgi_graphite_flags="-L -M -p 2 --socket :8000 --gid 80 --uid 80 --python-path /usr/local/lib/python2.7/site-packages/ --file /usr/local/etc/graphite/graphite.wsgi"' >> /etc/rc.conf.local

# Start UWSGI application server
service uwsgi start

## On the apps jails:
# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/graphite << 'EOF'
    upstream graphite {
        server       carbon.pa-us.mydomain.name:8000;
    }
    server {
        listen       80;
        server_name  graphite.pa-us.mydomain.name graphite;

        access_log   /var/log/nginx/graphite_access.log;
        root         /usr/local/share/graphite-web;

        location / {
            uwsgi_pass             graphite;
            uwsgi_param            UWSGI_SCRIPT graphite;
            include                uwsgi_params;
        }
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/graphite graphite

# On the Host, do an rsync of all the graphite-web content to the web front end
# jails so nginx is able to serve any static content. This should also be done
# after every update of the www/py-graphite-web port
rsync -authic --progress --delete /zfs/jails/carbon.pa-us.mydomain.name/usr/local/share/graphite-web/ /zfs/jails/apps1.pa-us.mydomain.name/usr/local/share/graphite-web
rsync -authic --progress --delete /zfs/jails/carbon.pa-us.mydomain.name/usr/local/share/graphite-web/ /zfs/jails/apps2.pa-us.mydomain.name/usr/local/share/graphite-web

# Start reload Nginx
service nginx reload

################################################################################
##                       Serviio Jail Configuration                           ##
################################################################################
# Helpful links:
# http://forums.nas4free.org/viewtopic.php?f=79&t=1796
# http://luffare.blogspot.com/2011/04/dlna-server-on-freebsd-82-using-serviio.html
# http://wiki.serviio.org/doku.php?id=build_ffmpeg_linux
################################################################################

ezjail-admin create -f lan serviio.pa-us.mydomain.name 10.100.102.14,2001:123:4:5678::14
mkdir -p /zfs/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_media
mkdir -p /zfs/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_photo_albums
echo '/zfs/homedirs/common_media /zfs/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_media nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
echo '/zfs/homedirs/common_photo_albums /zfs/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_photo_albums nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /zfs/jails/serviio.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
ezjail-admin console -f serviio.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Setup FFMPEG options per guidance in the helpful links then start Serviio build.
# cd /usr/ports/multimedia/ffmpeg && make config WITH_RTMP=YES WITH_X11GRAB=YES WITH_FAAC=YES WITH_LAME=YES WITH_AMR_NB=YES WITH_AMR_WB=YES WITH_ASS=YES
# portmaster net/serviio graphics/dcraw
pkg install serviio dcraw

# Fix home directory for Serviio then enable and start it.
mkdir -p /var/db/serviio/home/plugins
pw usermod dlna -m -d /var/db/serviio/home
echo 'serviio_enable="YES"' >> /etc/rc.conf.local
echo 'serviio_lang="en_US.UTF-8"' >> /etc/rc.conf.local
echo 'serviio_args="-Dserviio.advertisementDuration=15 -Dserviio.libraryPollerFrequency=5"' >> /etc/rc.conf.local
service serviio start

########### Option 1: PHP5 FPM listener for Nginx App Jail Frontend ############
#portmaster lang/php56 ftp/php56-curl textproc/php56-xml converters/php56-mbstring devel/php56-json textproc/php56-simplexml textproc/php56-dom
pkg install php56 php56-curl php56-xml php56-mbstring php56-json php56-simplexml php56-dom

sed -i '' -e 's/;listen.allowed_clients = 127.0.0.1/listen.allowed_clients = 10.100.102.11,10.100.102.12/' /usr/local/etc/php-fpm.conf

cd /tmp && fetch https://github.com/SwoopX/Web-UI-for-Serviio/archive/Serviio-1.5.zip
mkdir -p /usr/local/www
unzip -d /usr/local/www Serviio-1.5.zip

# rsync the entire /usr/local/www/Web-UI-for-Serviio-Serviio-1.5 directory
# to both apps servers and add this to their nginx.conf

# Create sites-available config file and follow up with sites-enabled symlink
cat > /usr/local/etc/nginx/sites-available/serviio-console << 'EOF'
    server {
        listen       80;
        server_name  serviio-console.pa-us.mydomain.name serviio-console;

        access_log   /var/log/nginx/serviio_console_access.log;
        root         /usr/local/www/Web-UI-for-Serviio-Serviio-1.5;

        location / {
            index index.php;
        }
        location ~ \.php$ {
            fastcgi_pass 10.100.102.14:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /usr/local/www/Web-UI-for-Serviio-Serviio-1.5$fastcgi_script_name;
            include fastcgi_params;
        }
        location ~ /\.ht {
            deny all;
        }
    }
'EOF'
cd /usr/local/etc/nginx/sites-enabled && ln -s ../sites-available/serviio-console serviio-console

echo 'php_fpm_enable="YES"' >> /etc/rc.conf.local
service php-fpm start

################### Option 2: Standalone Apache/PHP Stack ######################
# Setup Apache 2.4
pkg install www/apache24

# Setup Mod_PHP56 and required webUI deps
pkg install www/mod_php56 lang/php56 ftp/php56-curl textproc/php56-xml converters/php56-mbstring devel/php56-json textproc/php56-simplexml textproc/php56-dom

# Fetch the current WebUI. Update if a new version is available on the Serviio wiki.
# http://wiki.serviio.org/doku.php?id=phpwebui
cd /tmp && fetch https://github.com/SwoopX/Web-UI-for-Serviio/archive/Serviio-1.5.zip
unzip -d /usr/local/www Serviio-1.5.zip

# Setup httpd.conf file
cd /usr/local/etc/apache24
patch httpd.conf << 'EOF'
219c220
< #ServerName www.example.com:80
---
> ServerName serviio.pa-us.mydomain.name:80
243,244c244,245
< DocumentRoot "/usr/local/www/apache24/data"
< <Directory "/usr/local/www/apache24/data">
---
> DocumentRoot "/usr/local/www/Web-UI-for-Serviio-Serviio-1.5"
> <Directory "/usr/local/www/Web-UI-for-Serviio-Serviio-1.5">
277c278
<     DirectoryIndex index.html
---
>     DirectoryIndex index.html index.php
'EOF'

# Create Include file to execute PHP extensions
cat > Includes/mod_php.conf << 'EOF'
<FilesMatch "\.php$">
    SetHandler application/x-httpd-php
</FilesMatch>
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
'EOF'

# Secure the httpd-default.conf file
cd /usr/local/etc/apache24/extra
patch httpd-default.conf << 'EOF'
55c55
< ServerTokens Full
---
> ServerTokens Prod
'EOF'

# Finalize and activate
echo 'apache24_enable="YES"' >> /etc/rc.conf.local
apachectl start

# Now bring up http://serviio/ in a web browser for configuration

################################################################################
##----------------------------------------------------------------------------##
##                Lan Service Jail Configuration (NAMED/TFTPD)                ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://dan.langille.org/2013/08/18/creating-a-freebsd-jail-to-run-dhcp-and-dns/
# http://www.wonkity.com/~wblock/docs/html/pxe.html
# https://forums.freebsd.org/viewtopic.php?&t=33849

ezjail-admin create -f lan lanser.pa-us.mydomain.name 10.100.102.15,2001:123:4:5678::15
mkdir -p /zfs/jails/lanser.pa-us.mydomain.name/zfs/data
echo '/zfs/poudriere/data/packages /zfs/jails/lanser.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.lanser_pa_us_mydomain_name
echo '/zfs/data /zfs/jails/lanser.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.lanser_pa_us_mydomain_name
ezjail-admin console -f lanser.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Install BIND
pkg install dns/bind910
echo 'named_enable="YES"' >> /etc/rc.conf.local
## Put config files in place from desktop
# scp configs/named.conf root@lanser:/etc/namedb/
# scp -r configs/myzonefiles root@lanser:/usr/local/etc/namedb/dynamic
chown bind /usr/local/etc/namedb/dynamic/*
service named start

# Install TFTPD
pkg install ftp/tftp-hpa
# Get syslinux-6.03
cd /root
fetch --no-verify-peer https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.zip
mkdir syslinux-6.03
unzip -d syslinux-6.03 syslinux-6.03.zip
rm syslinux-6.03.zip
# Populate tftpboot directory with bare minimum files needed from syslinux package
mkdir -p /zfs/data/tftpboot/images
mkdir -p /zfs/data/tftpboot/pxelinux.cfg
cp -v \
	syslinux-6.03/bios/com32/chain/chain.c32 \
	syslinux-6.03/bios/gpxe/gpxelinux.0 \
	syslinux-6.03/bios/core/pxelinux.0 \
	syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 \
	syslinux-6.03/bios/com32/lib/libcom32.c32 \
	syslinux-6.03/bios/core/lpxelinux.0 \
	syslinux-6.03/bios/memdisk/memdisk \
	syslinux-6.03/bios/com32/menu/menu.c32 \
	syslinux-6.03/bios/com32/modules/reboot.c32 \
	syslinux-6.03/bios/com32/menu/vesamenu.c32 \
	/zfs/data/tftpboot
# Get Ubuntu netboot installer
fetch http://archive.ubuntu.com/ubuntu/dists/saucy/main/installer-amd64/current/images/netboot/netboot.tar.gz
tar xvzf netboot.tar.gz
mv ubuntu-installer /zfs/data/tftpboot/
# Get mfsBSD images for testing
cd /zfs/data/tftpboot/images
fetch http://mfsbsd.vx.sk/files/images/10/amd64/mfsbsd-10.1-RELEASE-amd64.img
# Populate default configuration using the above
cat > /zfs/data/tftpboot/pxelinux.cfg/default << 'EOF'
ui vesamenu.c32
menu title Network Boot Menu
timeout 100

label localboot
  menu label Boot from Hard Drive
  kernel chain.c32
  append hd0

menu begin ubuntu
	menu title Network Install Ubuntu 13.10 to Hard Disk
	include ubuntu-installer/amd64/pxelinux.cfg/default
menu end

label mfsbsd64
  menu label Load mfsBSD 10.1-RELEASE amd64
  kernel memdisk
  initrd images/mfsbsd-10.1-RELEASE-amd64.img raw

label reboot
  menu label Reboot
  kernel reboot.c32
'EOF'
# Enable and start tftpd
echo 'tftpd_enable="YES"' >> /etc/rc.conf.local
echo 'tftpd_flags="-p -s /zfs/data/tftpboot -B 1024"' >> /etc/rc.conf.local
service tftpd start

################################################################################
##----------------------------------------------------------------------------##
##                       Owncloud Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://blog.gurb.org/index.php?post/2012/03/07/Installation-de-OwnCloud-sous-FreeBSD-9.02 
# https://wiki.archlinux.org/index.php/Owncloud
#############################################################################

ezjail-admin create -f dmz www1.pa-us.mydomain.name 192.168.102.13,2001:123:4567:890::13
ezjail-admin config -f 1 www1.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /zfs/jails/www1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.www1_pa_us_mydomain_name
mkdir /zfs/jails/www1.pa-us.mydomain.name/usr/local/etc/apache24/
cp /root/mycert/www.mydomain.name.* /zfs/jails/www1.pa-us.mydomain.name/usr/local/etc/apache24/
ezjail-admin console -f www1.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

# Assign Apache module build to the PHP5 config then start the full build.
# cd /usr/ports/lang/php5 && make config WITH_APACHE=YES
# portmaster www/apache22 lang/php5 www/owncloud
pkg install apache24 php5 owncloud

# Setup httpd.conf file
cd /usr/local/etc/apache24; cp httpd.conf httpd.conf.original
patch httpd.conf << 'EOF'
151c151
< #LoadModule rewrite_module libexec/apache24/mod_rewrite.so
---
> LoadModule rewrite_module libexec/apache24/mod_rewrite.so
185c185
< ServerAdmin you@example.com
---
> ServerAdmin jason.unovitch@gmail.com
194c194
< #ServerName www.example.com:80
---
> ServerName www.mydomain.name:80
218,219c218,219
< DocumentRoot "/usr/local/www/apache24/data"
< <Directory "/usr/local/www/apache24/data">
---
> DocumentRoot "/usr/local/www/owncloud"
> <Directory /usr/local/www/owncloud>
239c239
<     AllowOverride None
---
>     AllowOverride All
252c252
<     DirectoryIndex index.html
---
>     DirectoryIndex index.html index.php
380a381,382
>     AddType application/x-httpd-php .php
>     AddType application/x-httpd-php-source .phps
'EOF'

# Secure the httpd-default.conf file
cd /usr/local/etc/apache24/extra; cp httpd-default.conf httpd-default.conf.original
patch httpd-default.conf << 'EOF'
55c55
< ServerTokens Full
---
> ServerTokens Prod
'EOF'

# Setup httpd-ssl.conf file
cd /usr/local/etc/apache24/extra; cp httpd-ssl.conf httpd-ssl.conf.original
patch httpd-ssl.conf << 'EOF'
86,88c86,88
< DocumentRoot "/usr/local/www/apache24/data"
< ServerName www.example.com:443
< ServerAdmin you@example.com
---
> DocumentRoot "/usr/local/www/owncloud"
> ServerName www.mydomain.name:443
> ServerAdmin jason.unovitch@gmail.com
106c106
< SSLCertificateFile "/usr/local/etc/apache24/server.crt"
---
> SSLCertificateFile "/usr/local/etc/apache24/www.mydomain.name.crt"
116c116
< SSLCertificateKeyFile "/usr/local/etc/apache24/server.key"
---
> SSLCertificateKeyFile "/usr/local/etc/apache24/www.mydomain.name.key"
'EOF'

# Finalize and activate
chmod u+w /usr/local/www/owncloud/.htaccess
echo 'apache24_enable="YES"' >> /etc/rc.conf.local
apachectl start

################################################################################
##----------------------------------------------------------------------------##
##                       iRedMail Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://www.iredmail.org/install_iredmail_on_freebsd.html
# http://iredmail.com/wiki/index.php?title=Install/iRedMail/FreeBSD.Jail
################################################################################

ezjail-admin create -f dmz ms1.pa-us.mydomain.name 192.168.102.11,2001:123:4567:890::11
ezjail-admin config -f 1 ms1.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /zfs/jails/ms1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.ms1_pa_us_mydomain_name
ezjail-admin console -f ms1.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree

fetch https://bitbucket.org/zhb/iredmail/downloads/iRedMail-0.8.5.tar.bz2
tar xjf iRedMail-0.8.5.tar.bz2
cd iRedMail-0.8.5

cd pkgs && bash get_all.sh
cd .. && LOCAL_ADDRESS='192.168.102.11' bash iRedMail.sh

# If any port builds get hung up, rebuild manually and mark as completed
# Example with OpenLDAP is shown below.
cd /basejail/usr/ports/net/openldap24-server && make clean && make install
cd -
echo "export status_install_port_net_openldap24server='DONE' # Manually installed" >> ".status"
LOCAL_ADDRESS='192.168.102.11' bash iRedMail.sh

################################################################################
##----------------------------------------------------------------------------##
##                                   Cleanup                                  ##
##----------------------------------------------------------------------------##
################################################################################

## Set Kernel Secure Level
echo '' >> /etc/rc.conf
echo '# Kernel Secure Level' >> /etc/rc.conf
echo 'kern_securelevel_enable="YES"' >> /etc/rc.conf
echo 'kern_securelevel="1"' >> /etc/rc.conf
sysctl kern.securelevel=1

## Enable Auditing
echo '' >> /etc/rc.conf
echo '# Auditing' >> /etc/rc.conf
echo 'auditd_enable="YES"' >> /etc/rc.conf
service auditd start

## Enable auditdistd
# Examples from https://wiki.freebsd.org/auditdistd
# Passwords/hashes/fingerprints from wiki example, change as needed

## Server side only
# Generate certs
openssl req -x509 -nodes -newkey rsa:4096 -days 1825 -batch -out /etc/security/auditdistd.cert.pem -keyout /etc/security/auditdistd.key.pem
chmod 0600 /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem
chown root:wheel /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem

# Get Fingerprints
openssl x509 -in /etc/security/auditdistd.cert.pem -noout -fingerprint -sha256 | awk -F '[ =]' '{printf("%s=%s\n", $1, $3)}'

# Generate Shared Password
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Create /etc/security/auditdistd.conf configuration file
cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
receiver {
	listen "10.100.102.2:7878"
	host "xju-rtr" {
		remote "10.100.82.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
	host "xts-rtr" {
		remote "10.100.102.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Client side only
sed -i '' -e 's/dist:off/dist:on/g' /etc/security/audit_control

cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
sender {
	source "10.100.82.1"
	host "xju-rtr" {
		remote "10.100.102.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'
cat > /etc/security/auditdistd.conf << 'EOF'
timeout 300
sender {
	source "10.100.102.1"
	host "xts-rtr" {
		remote "10.100.102.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Both sides
# Because the configuration file contains passwords, set its permissions properly:
chmod 600 /etc/security/auditdistd.conf
chown root:wheel /etc/security/auditdistd.conf

echo 'auditdistd_enable="YES"' >> /etc/rc.conf
service auditdistd start

################################################################################
##----------------------------------------------------------------------------##
##                             Maintenance Notes                              ##
##----------------------------------------------------------------------------##
################################################################################
# Keep the ports tree in check! Every time you log in and are about to install
# ports, be sure to update the ports tree on both the host and jailed system!
################################################################################

portsnap fetch update
ezjail-admin update -P

################################################################################
# OR - Shorter version...
#
# Put the portsnap cron into good use. Just run `portsup` with this script to
# update ports with what has already been downloaded during the weekly cron.
# It will unpack the most recent portsnap saved by `portsnap cron` in
# /var/db/portsnap into both the host system and jail system ports trees.
################################################################################

cat > /usr/local/sbin/portsup << 'EOF'
#!/bin/sh
# Just a short script to quickly put the portsnap cron right into use
portsnap update
[ -e "/zfs/jails/basejail/usr/ports/.portsnap.INDEX" ] \
    && portsnap -p "/zfs/jails/basejail/usr/ports" update
'EOF'
chmod 555 /usr/local/sbin/portsup

################################################################################
# Binary Updates with an Ezjail update immediately after.
# http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-freebsdupdate.html
################################################################################

# Small Updates, I.E. 9.1-RELEASE to 9.1-RELEASE-p6
freebsd-update fetch
sed -i '' -e 's/kern_securelevel/#kern_securelevel/' /etc/rc.conf
sed -i '' -e 's/ezjail_enable/#ezjail_enable/' /etc/rc.conf
shutdown -r now
freebsd-update install
ezjail-admin update -u
poudriere jail -u -j 101amd64
poudriere jail -u -j 101i386
poudriere jail -u -j 93amd64
poudriere jail -u -j 93i386
poudriere jail -u -j 84amd64
poudriere jail -u -j 84i386
sed -i '' -e 's/#kern_securelevel/kern_securelevel/' /etc/rc.conf
sed -i '' -e 's/#ezjail_enable/ezjail_enable/' /etc/rc.conf
service ezjail start
sysctl kern.securelevel=1

# Big Updates, I.E. 9.2-RELEASE to 10.0-RELEASE
## Backup Old /etc
cp -Rp /etc /root/etc.old
## Run freebsd-update to get the latest patches
freebsd-update upgrade -r 10.1-RELEASE
## If using a heightened securelevel, lower it and reboot
sed -i '' -e 's/kern_securelevel/#kern_securelevel/' /etc/rc.conf
shutdown -r now
## First `freebsd-update install` and reboot for new kernel
freebsd-update install
shutdown -r now
## Second `freebsd-update install` for new userland
freebsd-update install
shutdown -r now
## Poudriere start - Fetch new Poudriere build jail for new release - Jump ahead if using public packages
poudriere jails -c -j 101amd64 -v 10.1-RELEASE -a amd64
## Rename current make.conf
mv /usr/local/etc/poudriere.d/92amd64-make.conf /usr/local/etc/poudriere.d/101amd64-make.conf
poudriere bulk -f /zfs/poudriere/pkg_list -j 101amd64
## Update local repository files to point to the new release
find / -name myrepo.conf -exec sed -i '' -e 's/92amd64/101amd64/' {} \;
## Delete old build jail
poudriere jail -d -j 91amd64
## Poudriere end - continue from here if just using public packages
pkg-static upgrade -fy
pkg autoremove
## Third `freebsd-update install` to cleanup old libs (major version upgrades only)
freebsd-update install
shutdown -r now
## The host is completely upgraded to the new version and all cleanup is done
## Jails can be updated anytime after upgrading the host.
## Archive original jail set
ezjail-admin stop
ezjail-admin archive -A
## Update basejail to the new release it see already via `uname` and give it the source release
ezjail-admin update -U -s 9.2-RELEASE-p3
## For upgrading to 9.2, open vipw and immediatly save so mergemaster recognizes
## the new auditdistd user
vipw
## For upgrading from 9->10, update deprecated variables to the new format
find /zfs/jails -name periodic.conf -exec sed -i '' -e 's/daily_status_security_ipfwdenied_enable/security_status_ipfwdenied_enable/;s/daily_status_security_ipfwlimit_enable/security_status_ipfwlimit_enable/;s/daily_status_security_kernelmsg_enable/security_status_kernelmsg_enable/' {} \;
## For upgrading from 9->10, update all jail devfs rules to use integers rather than strings
sed -i '' -e 's/"devfsrules_jail"/"4"/;s/"devfsrules_jail_with_vpn"/"5"/;s/"devfsrules_jail_with_bpf"/"6"/' /usr/local/etc/ezjail/*
## Run mergemaster on each jail
mergemaster -p /zfs/jails/newjail
mergemaster -UF -D /zfs/jails/newjail
mergemaster -p /zfs/jails/jail1
mergemaster -UF -D /zfs/jails/jail1 # and continue on for each jail
## Major release upgrades only - disable starting any services dependent on old libraries and start ezjail
find /zfs/jails -name rc.conf.local -exec sed -i '' -e 's/YES/NO/' {} \;
service ezjail start
## Log in to each jail and perform full upgrades on each jail for a new major release
## ssh or `ezjail-admin console <jail>` for each one
pkg-static upgrade -fy
pkg autoremove
## Back to the host; stop, archive, and start again the newly upgraded jails
service ezjail stop
ezjail-admin archive -A
service ezjail start
## Enable and raise securelevel if in use
sed -i '' -e 's/#kern_securelevel/kern_securelevel/' /etc/rc.conf
sysctl kern.securelevel=1

################################################################################
# CONSOLE USE ONLY
# Major system updates short of kernel updates, go to single-user mode
################################################################################

shutdown now
# Perform maintenance, then back to multiuser mode
return
